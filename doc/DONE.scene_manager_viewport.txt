-----------------------------------------------------------------------------
New idea: Make TKamSceneManager a descendant of TKamAbstractViewport.
This way we share code, and no need for dumb calls from TKamSceneManager
to TheDefaultViewport are even needed.
Yes, go for it.

In any case:
- We want, for DefaultViewport = true, to have some
  TheDefaultViewport: TKamViewport instance created,
  with sizes synched (in each ContainerResize) to contained sizes,
  and with Camera synched to our Camera.

  Later: no need anymore, we have better resolution than TheDefaultViewport:
  just make TKamSceneManager inherit from TKamAbstractViewport.

- Each TKamViewport takes care of passing it's events to it's Camera.
  Done now in each TkamAbstractViewport.

------------------------------------------------------------------------------
Question:
1. Should we make TKamViewport as TUIControl, separate from TKamSceneManager,
   that only has a link to TKamSceneManager?
2. Or maybe make a list of viewports inside TKamSceneManager?

Resolution:

1. Advantage: TKamViewport
   is a natural 2D control, it has sensible and simple PositionInside,
   and placing many TKamViewport instances on Controls follows the way
   Controls work.

   Disadvantage: hmmm, TheDefaultViewport idea (link from TKamSceneManager
   to viewport for DefaultViewport = true) gets harder.

   This is mitigated by the new idea of TKamAbstractViewport,
   which makes TheDefaultViewport idea (which was clumsy) not needed at all.
   Go this way.

2. Or maybe make a list of viewports inside TKamSceneManager?

   Disadvantage: SceneManager would have to walk over it's CustomViewports
   list, checking their PositionInside, essentially duplicating what
   TGLUIWindow.Controls / TKamOpenGLControl.Controls already can do for
   their lists of TUIControls.

------------------------------------------------------------------------------
