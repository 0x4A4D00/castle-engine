Short primer on how to profile view3dscene with valgrind (actually callgrind, one of the many valgrind's tools.) This reflects some Kambi "preferences" (so, you do not have to follow it blindly, your real guide is documentation of FPC+valgrind and valgrind/callgrind manual.)

http://valgrind.org/docs/manual/cl-manual.html

Compile for valgrind:
- look in ../castle-fpc.cfg for valgrind options, uncomment them
- clean units (to recompile all for valgrind), like
    ./clean_everything.sh
- compile as usual, with -dRELEASE (you want to profile released code)

Run with valgrind:
Generally, running program through callgrind adds an enormours slowdown, especially with instrumentation (this is when actual measurements take place). So it's advised to start without instrumentation, and only turn it on for the interested code part.

valgrind --tool=callgrind --instr-atstart=no ~/bin/view3dscene

# from other shell:
callgrind_control -i on
callgrind_control -i off

# investigate the report:
kcachegrind

------------------------------------------------------------------------------
For memory usage profiling:

- Try using CMem: add CMem as first unit on uses clause of the main program,
  or compile with -FaCMem. This avoids possible complications of default
  FPC memory manager (that may be lazy about releasing memory to OS,
  in order to gain some speed; although this didn't have any noticeable bad
  impact on memory use in my tests, so FPC memory manager does a good job;
  but still it's worth checking.)

  Note that valgrind (-gv) option conflicts with using CMem explicitly.
  That is because, as far as I know, using -gv means that CMem
  is already, implicitly, added (looks like CMem is required for valgrind to
  duplicated in uses clause. correctly interpret results).
  So "-gv -FaCMem" will say that Cmem is duplicated in uses clause.
  So actually any one of "-gv" or "-FaCMem" (but don't use both)
  will result in your program being tested with CMem memory manager.

- Use valgrind's massif tool.
  Compile like before, then run like

  valgrind --tool=massif \
  --alloc-fn='CMEM_CGETMEM$LONGINT$$POINTER' \
  --alloc-fn='CMEM_CREALLOCMEM$POINTER$LONGINT$$POINTER' \
  --alloc-fn='SYSTEM_GETMEM$LONGINT$$POINTER' \
  --alloc-fn='SYSTEM_GETMEM$POINTER$LONGINT' \
  --alloc-fn='SYSTEM_REALLOCMEM$POINTER$LONGINT$$POINTER' \
  ~/bin/view3dscene

  (Previously I used --format=html, but it seems not available anymore?)
  And investigate the resulting massif.out.xxx file afterwards.
