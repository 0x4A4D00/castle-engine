------------------------------------------------------------------------------
Move this docs somewhere?

       { Additional viewports to display 3D world.

	 This is independent from DefaultViewport.

	 When DefaultViewport = @true, this specifies additional viewports.
	 Example usage: imagine a space shooter, like Epic or Wing Commander.
	 You display in a default viewport FPS view from your space ship.
	 And additionally you have a small viewport in upper-right corner
	 that displays view from currently fired rocket.

	 When DefaultViewport = @true, this specifies viewports to use
	 @italic(instead) of default viewport. Example usage:
	 in a typical 3D modeling programs, you like to have 4 viewports
	 with 4 different cameras (front view, side view, top view,
	 and free perspective view). Or when you make a split-screen game,
	 played by 2 people on a single monitor.

	 In any case, viewports (DefaultViewport and CustomViewports) may overlap
	 with each. We first render the DefaultViewport, and then
	 CustomViewports in downto order. So the first viewport on
	 CustomViewports is considered to be the front one, this is consistent
	 with TGLUIWindow.Controls and TKamOpenGLControl.Controls treatment. }

- You always want to have exactly one scene manager for your 3D world,
  and placed on the Controls (even if you use DefaultViewport = false).
  This way your Items get Idle called once, and exactly once (not more, not less).
------------------------------------------------------------------------------

For later, something like KeyPreview for viewport would be useful
to split-screen games, to catch keys (but not mouse clicks) regardless
of mouse position (to handle keys from both players at once, assuming
not conflicting). So, actually (since TKamViewport will decide about it,
and TCamera.PositionInside is ignored), TKamViewport.KeyPreview is needed.
Maybe just make TUIControl.KeyPreview property?

TODO: use Focused = true to draw border around focused viewport
in multple_viewports.

Hm, maybe TKamCustomViewport, a common ancestor, with
common Render* methods, from which TKamSceneManager and TkamViewport derive?
This would allow making descendants of TkamViewport with specialized
rendering methods.
E.g. make in multple_viewports two viewports render with wireframe.

Render / Draw stuff move also to TKamAbstractViewport (like RenderEverything).

Fix:
      If you want, it's absolutely Ok (even encouraged) to assign
      camera from viewport also to TKamSceneManager.Camera.
      TODO: for now it doesn't work.
  or fix comments, and add some checks, to disallow it?
  What about camera for headlight?

TKamSceneManager.MouseMove
TKamSceneManager.Idle
merge into TKamAbstractViewport
