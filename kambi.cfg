# -*- mode: shell-script -*-
#
# FPC configuration file for all Kambi's sources.
# While it is included in kambi_vrml_game_engine, I use it also
# for all my other programs.
# For every FPC version that I support.
# Of course some ideas based on what I saw in sample fpc.cfg.
#
# Accepts two switches : DEBUG and RELEASE. If you don't define any of them
# debug and optimizing code will be done according to compiler defaults.
# Never define both of them.
#
# Also accepts a switch KAMBI_CONFIG_PRIVATE.
# This is what I (Kambi) use on my own system.
# (It doesn't pass relative paths -Fu and -Fi then, I set them myself
# by my scripts).
#
# ----------------------------------------------------------------------

#IFDEF KAMBI_CONFIG_PRIVATE

  # Show logo (shows fpc version, usable for me since I use various fpc versions)
  -l

  # Show warnings+ notes+ hints+ info+ all_proc_decls.
  # I'm filtering output of fpc using grep, so I don't mind that FPC
  # outputs many hints that I usually want to ignore :
  # (later update: there are *so* many useless hints produces by FPC
  # that I decided to simply turn hints off).
  -vwnib

#ELSE

  # However, when putting kambi.cfg in my public sources release,
  # don't show all of this. So here's "official" -v<x> declaration :
  # (currently, show nothing)
  -v

#ENDIF

# Input/output checks : yes, always, even in release version -- my code
# depends on the fact that io errors in std Pascal funcs are checked
# automatically (and raise exceptions if SysUtils is compiled in)
-Ci

# syntax options --------------------------------------------------------

# Default mode.
#
# Since 2006-11, I use objfpc mode for everything. Some reasons why it's better
# over delphi mode:
# - There are some things strange in delphi mode, for compat with delphi/tp,
#   that sometimes bite me (like the fact that in FPC >= 2.0.3
#   Single(Integer) makes a variable typecast, not a value typecast).
# - Moreover, ObjFpc has many sensible improvements:
#   the whole way of assigning procedural variables
#   is much better ("@" is required, and assignment is always checked
#   for parameter correctness (in delphi mode @ may be omitted; when it's
#   not omitted, you can cheat and pass procedure with not matching params))
# - Check that method parameter names must differ from class
#   fields/methods/properties --- this is great.
-Mobjfpc

# macros on
-Sm
# c-like operators +=, -= etc.
-Sc
# allow LABEL and GOTO
-Sg
# inline allowed
-Si
# use ansistrings
-Sh

# units/includes paths --------------------------------------------------

# It seems that FPC does not define symbol UNIX before reading config file,
# even though it defines LINUX (or FREEBSD; I assume that this is also
# the case with DARWIN).
# But I need symbol UNIX *now* to include paths common for all UNIXes.
#IFDEF LINUX
  #DEFINE UNIX
#ENDIF
#IFDEF DARWIN
  #DEFINE UNIX
#ENDIF
#IFDEF FREEBSD
  #DEFINE UNIX
#ENDIF

#IFNDEF KAMBI_CONFIG_PRIVATE

  # Common paths for all OSes
  -Fubase/
  -Fibase/
  -Fibase/templates/
  -Fufonts/
  -Fifonts/
  -Fuopengl/
  -Fiopengl/
  -Fiopengl/gtk/
  -Fuimages/
  -Fiimages/
  -Fu3dgraph/
  -Fi3dgraph/
  -Fu3dmodels/
  -Fi3dmodels/
  -Fu3dmodels.gl/
  -Fi3dmodels.gl/
  -Fuaudio/
  -Fiaudio/

  #IFDEF UNIX
    -Fubase/unix/
    -Fibase/unix/
    -Fuopengl/unix/
    -Fiopengl/unix/
  #ENDIF

  #IFDEF WIN32
    -Fubase/win32/
    -Fibase/win32/
    -Fufonts/win32/
    -Fuopengl/win32/
    -Fiopengl/win32/
  #ENDIF

#ENDIF

# Compile profiling code (gprof).
# Generally, this should be used with -dRELEASE --- debug code may be (slightly)
# slower in (slightly) different places, because of debug checks (range,
# overflow checks etc.).
# -pg

# debug specific -------------------------------------------------

#IFDEF DEBUG
  #WRITE Compiling Debug Version

  # range checks
  -Cr
  # overflow checks
  -Co

  # stack overflow checks
  -Ct

  # assertions checks
  -Sa

  # vitual method table checks
  -CR

  # debug info for gdb and browser.
  -g
  #-bl

  # LineMode unit, HeapTrc unit, checking pointer validity
  -gl

  #IFDEF KAMBI_CONFIG_PRIVATE

    # -gh is not used by default for public builds, because
    # -gh produces some problems when my programs exit with ProgramBreak or Halt:
    # we will always leak memory then. This is FPC bug (although
    # harmless, since in this case OS will free these leaks anyway,
    # and it's rumouredly unfixable). I can just ignore it, but for
    # casual user this may be confusing, as it suggests that "something
    # is wrong", while in fact all is OK.
    -gh

    # -gc is not useful ? Makes many false errors...
    # In any case, -gc requires -gh because checking pointer
    # validity is part of HeapTrc unit.
    #-gc

  #ENDIF

  # Info for valgrind
  #-gv
#ENDIF

# release specific -----------------------------------------------

#IFDEF RELEASE
  #WRITE Compiling Release Version

  # optimize : level 2, faster code
  -O2
  -OG

  # (Don't optimize for Pentium;
  #  1. there are still some people with older i386 processors ?
  #  2. these Pentium-specific optimizations don't seem to give *any*
  #     real improvement for my code (checked with rayhunter
  #     with FPC 1.0.10;  TODO -- do some speed checks with FPC 2.0.0))
  # Note: remember, if you enable it, wrap it in #IFDEF CPUI386
  # -Op2

  # (smartlink turned off because REALLY slows down compilation
  # and doesn't reduce size of my programs too much)
  #-CX
  #-XX

  # strip symbols from exe (symbols are used only in debugging)
  -Xs
#ENDIF

# eof --------------------------------------------------------------------------
