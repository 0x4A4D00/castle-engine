{
  Copyright 2002-2010 Michalis Kamburelis.

  This file is part of "Kambi VRML game engine".

  "Kambi VRML game engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Kambi VRML game engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Global routines for parsing classic VRML/X3D encoding. }

{$ifdef read_interface}

const
  { File filters for TGLWindow.FileDialog if you want to open a file and then
    pass it to LoadVRMLClassic. Note that only LoadVRMLClassic that takes a FileName
    parameter (as a string) can deal with gzip compressed files. }
  LoadVRMLClassic_FileFilters =
  'All files|*|' +
  '*VRML (*.wrl, *.wrl.gz, *.wrz)|*.wrl;*.wrl.gz;*.wrz';

  { File filters for TGLWindow.FileDialog if you want to save a file using
    SaveVRMLClassic. }
  SaveVRMLClassic_FileFilters =
  'All files|*|' +
  '*VRML (not compressed) (*.wrl)|*.wrl';

  SaveX3DClassic_FileFilters =
  'All files|*|' +
  '*X3D classic (*.x3dv)|*.x3dv';

{ Load VRML/X3D file in classic encoding from stream. Return it's root node.

  Note that you must pass here TPeekCharStream class, not just any
  generic TStream class. But it's not a problem, really, because
  you can wrap any class inside TPeekCharStream descendant. E.g. do
  @longcode(#
    LoadVRMLClassic(TBufferedReadStream.Create(MyStream, false), WWWBasePath)
  #)

  Note that this function can't handle compressed data (VRML files are
  sometimes compressed with gzip). You should already pass here a stream
  with uncompressed text data.

  @param(PrototypeNames If <> @nil, will be filled with global
    prototype namespace at the end of parsing the file.
    Useful mostly for EXTERNPROTO implementation.)

  @param(Exported If non-nil, we will assign here node names
    exported from the file. Used to handle IMPORT/EXPORT X3D mechanism.)

  @raises(EVRMLGzipCompressed If the Stream starts with gzip file header.) }
function LoadVRMLClassic(Stream: TPeekCharStream;
  const WWWBasePath: string;
  PrototypeNames: TVRMLPrototypeNames = nil;
  Exported: TVRMLNodeNames = nil): TVRMLNode; overload;

function LoadVRMLClassicFromString(const VRMLContents: string;
  const WWWBasePath: string): TVRMLNode; overload;

{ Load VRML/X3D file in classic encoding, return it's root node.

  This handles also VRML files compressed with gzip
  (it just internally filters file contents with TGZFileStream,
  uncompressing it on the fly).

  If AllowStdIn then FileName = '-' is understood as "standard input"
  (StdInStream). Base path for resolving URLs in this case is GetCurrentDir.

  @param(PrototypeNames If <> @nil, will be filled with global
    prototype namespace at the end of parsing the file.
    Useful mostly for EXTERNPROTO implementation.) }
function LoadVRMLClassic(const FileName: string;
  AllowStdIn: boolean;
  PrototypeNames: TVRMLPrototypeNames = nil;
  Exported: TVRMLNodeNames = nil): TVRMLNode; overload;

{ Deprecated name for LoadVRMLClassic. @deprecated }
function ParseVRMLFile(const FileName: string;
  AllowStdIn: boolean;
  PrototypeNames: TVRMLPrototypeNames = nil): TVRMLNode;

{ Write VRML file with given root Node.
  This includes writing VRML header '#VRML ...'.

  @param(PrecedingComment
    If PrecedingComment <> '' then we will write a comment
    '# '+ PrecedingComment at the beginning. This is for you
    to optionally put name of the generator program or source filename
    or time/date of generation etc.) }
procedure SaveVRMLClassic(Node: TVRMLNode;
  Stream: TStream; const PrecedingComment: string); overload;
procedure SaveVRMLClassic(Node: TVRMLNode;
  const Filename, PrecedingComment: string); overload;

{ Deprecated name for SaveVRMLClassic. @deprecated }
procedure SaveToVRMLFile(Node: TVRMLNode;
  const Filename, PrecedingComment: string);

{$endif read_interface}

{$ifdef read_implementation}

{ Internal for ParseIgnoreToMatchingSqBracket and
  ParseIgnoreToMatchingCurlyBracket }
procedure ParseIgnoreToMatchingBracket(
  Lexer: TVRMLLexer; Names: TVRMLNames;
  LevelSqBracket, LevelCurlyBracket: integer);
begin
  while (LevelSqBracket > 0) or
        (LevelCurlyBracket > 0) do
  begin
    case Lexer.Token of
      vtOpenCurlyBracket: Inc(LevelCurlyBracket);
      vtCloseCurlyBracket: Dec(LevelCurlyBracket);
      vtOpenSqBracket: Inc(LevelSqBracket);
      vtCloseSqBracket: Dec(LevelSqBracket);
      vtEnd: raise EVRMLParserError.Create(Lexer, 'Unexpected end of stream');
    end;
    Lexer.NextToken;
  end;
end;

(* Assume that we just read "[", and are looking at next character.
   Read everything up to (and including) matching "]".
   This is a hack to omit (not really parse) interface sections
   of prototypes. *)
procedure ParseIgnoreToMatchingSqBracket(Lexer: TVRMLLexer; Names: TVRMLNames);
begin
  ParseIgnoreToMatchingBracket(Lexer, Names, 1, 0);
end;

(* Just like ParseIgnoreToMatchingSqBracket, but here for "{" and "}" brackets.
   This is a hack to omit (not really parse) unknown VRML nodes. *)
procedure ParseIgnoreToMatchingCurlyBracket(Lexer: TVRMLLexer; Names: TVRMLNames);
begin
  ParseIgnoreToMatchingBracket(Lexer, Names, 0, 1);
end;

(*
  Parse VRML node. This parses
  @preformatted([ DEF <nodename> ] <nodetype> { node-content })
  or
  @preformatted(USE <nodename>)

  If we will find USE clause but node name will be unknown, the normal
  behavior (when NilIfUnresolvedUSE = @false, default) is to raise
  EVRMLParserError (just like in case of many other errors).
  However, this is a particular parsing error, because we can probably
  pretty safely continue parsing, ignoring this error.
  So if you pass NilIfUnresolvedUSE = @true, this function will do
  VRMLWarning and simply return @nil.

  @raises(EVRMLParserError On various parsing errors.)
*)
function ParseNode(Lexer: TVRMLLexer; Names: TVRMLNames;
  NilIfUnresolvedUSE: boolean): TVRMLNode;

  procedure ParseNamedNode(const nodename: string);
  var
    NodeClass: TVRMLNodeClass;
    NodeTypeName: string;
    Proto: TVRMLPrototypeBase;
  begin
    Lexer.CheckTokenIs(vtName, 'node type');
    NodeTypeName := Lexer.TokenName;
    Lexer.NextToken;

    { VRML / X3D specifications say it is an error for a PROTO to have
      the same name as built-in node. I didn't found any definite
      statements about EXTERNPROTO names, although I vaguely remember
      some notes that EXTERNPROTO name should take precedence over
      built-in names. And this seems most sensible. Especially for
      nodes that were not available in older VRML / X3D editions and
      were declared (possibly slightly sensible) using EXTERNPROTOs,
      it's a good thing to use EXTERNPROTOs: they were probably most
      current with respect to given VRML file. Examples are CAD
      test files from
      http://www.web3d.org/x3d/content/examples/Basic/CAD/

      So we first search for NodeTypeName among protos.
      Only when this failed, we look at built-in nodes in NodesManager.
    }

    Proto := Names.Prototypes.Bound(NodeTypeName);
    if Proto <> nil then
    begin
      if (Proto is TVRMLExternalPrototype) and
         (TVRMLExternalPrototype(Proto).ReferencedClass <> nil) then
        Result := TVRMLExternalPrototype(Proto).ReferencedClass.Create(NodeName, Names.WWWBasePath) else
        Result := TVRMLPrototypeNode.CreatePrototypeNode(NodeName, Names.WWWBasePath, Proto);
    end else
    begin
      NodeClass := NodesManager.NodeTypeNameToClass(NodeTypeName,
        Lexer.VRMLVerMajor, Lexer.VRMLVerMinor);
      if NodeClass <> nil then
      begin
        Result := NodeClass.Create(nodename, Names.WWWBasePath);
      end else
      begin
        Result := TVRMLUnknownNode.CreateUnknown(nodename, Names.WWWBasePath, NodeTypeName);
      end;
    end;

    Names.Nodes.Bind(Result, false);

    Result.Parse(Lexer, Names);

    if Result is TVRMLPrototypeNode then
    try
      Result := TVRMLPrototypeNode(Result).Instantiate;
    except
      on E: EVRMLPrototypeInstantiateError do
        { Just write E.Message and silence the exception.
          Result will simply remain as TVRMLPrototypeNode instance in this case. }
        VRMLWarning(vwSerious, E.Message);
    end;

    { Cycles in VRML graph are bad:
      - they can cause our current traversing routines
        to loop infinitely (we don't check there to avoid visiting already
        visited nodes).
      - they can cause memory leaks, since reference
        counting doesn't work when we have loops.

      My initial brilliant idea is that I can 100% avoid having cycles
      by simply doing Result.Bind *after* the node is parsed.
      This is trivially simple and works 100% to avoid cycles.
      Moreover, this is needed in the light of possible
        "Result := TVRMLPrototypeNode(Result).Instantiate"
      which means that before parsing, our Result is possibly not something
      that we wanted to insert to NodeNames.

      So there I was, swimming in joy with ultra-simple and 100% correct
      solution. Until I found a problem with it...

      In VRML 2.0, there is a Script node. It has interface declarations.
      It's interface declaration may have SFNode type. And then it can
      do USE call. And the trouble: VRML allows this very special USE
      clause to create cycle. E.g. see
      ~/sources/openvrml/openvrml/models/jsTouch.wrl.

      Similar usage occurs for RenderedTexture.scene.
      And many X3D models use ROUTEs inside the nodes to/from which they lead.
      Although ROUTEs do not cause cycles when traversing, they still mean
      that node name must be bound earlier.

      Cycles in graph aren't common,
      at least for grouping nodes X3D specification (but not VRML 97,
      as far as I see) says explicitly
      "A children field is not allowed to contain nodes that
      are ancestors of the grouping node"
      so in case of this particular "children" MFNode field cycles
      are not possible. In many other cases cycles are not possible,
      e.g. Appearance cannot create cycles since no Appearance children
      can be of Appearance type... But generally there is no rule that
      guarantees "no cycles" in VRML file, as we can see.
      And events like addChildren can create cycles easily.

      For now, NilIfUnresolvedUSE successfully changes there special
      cycles in Script into mere VRMLWarning, so they don't stop
      us from reading the rest of VRML file. And since we don't handle
      any scripting, this is not a problem in practice. But some day it'll
      have to be fixed... }

    Names.Nodes.Bind(Result, true);
  end;

var
  NodeName, S: string;
  UsedNodeFinished: boolean;
begin
  Result := nil;
  try
    (* node means :
       DEF <name> <nodetype> { node-content } or
       USE <name> or
       <nodetype> { node-content }
    *)

    case Lexer.Token of
     vtKeyword:
       case Lexer.TokenKeyword of
        vkDEF:
          begin
           Lexer.NextTokenForceVTName;
           nodename := Lexer.TokenName;
           Lexer.NextToken;
           ParseNamedNode(nodename);
          end;
        vkUSE:
          begin
           Lexer.NextTokenForceVTName;
           nodename := Lexer.TokenName;

           {get appropriate node}
           Result := Names.Nodes.Bound(nodename, UsedNodeFinished);
           if (Result = nil) or (not UsedNodeFinished) then
           begin
             if Result = nil then
               S := Format('Incorrect USE clause: node name "%s" undefined', [NodeName]) else
             begin
               S := Format('Cycles in VRML/X3D graph: USE clause inside node "%s" refers to the same node', [NodeName]);
               Result := nil; { return nil in case of cycles }
             end;
             if NilIfUnresolvedUSE then
               VRMLWarning(vwSerious, S) else
               raise EVRMLParserError.Create(Lexer, S);
           end;

           Lexer.NextToken;
          end;
        else raise EVRMLParserError.Create(Lexer,
               'Expected node type or DEF or USE, got '+Lexer.DescribeToken);
       end;
     vtName: ParseNamedNode('');
     else raise EVRMLParserError.Create(Lexer,
            'Expected node type or DEF or USE, got '+Lexer.DescribeToken);
    end;
  except FreeAndNil(Result); raise end;
end;

{ This parses a sequence of VRML statements: any number of nodes,
  (external) protypes, routes, import/export declarations.
  This is good to use to parse whole VRML file,
  or a (non-external) prototype content.

  Returns a single VRML node. If there was exactly one statement
  and it was a node statement, returns this node. Otherwise,
  returns everything read wrapped in artifical TVRMLRootNode_1
  or TVRMLRootNode_2 instance. }
function ParseVRMLStatements(
  Lexer: TVRMLLexer; Names: TVRMLNames;
  const EndToken: TVRMLToken;
  ParseX3DHeader: boolean): TVRMLNode;
var
  PositionInParent: Integer;

  { Create root group node, appropriate for current VRML version in Lexer. }
  function CreateRootNode: TVRMLNode;
  begin
    if TVRMLRootNode_1.ForVRMLVersion(
        Lexer.VRMLVerMajor, Lexer.VRMLVerMinor) then
    begin
      Result := TVRMLRootNode_1.Create('', Names.WWWBasePath);
      TVRMLRootNode_1(Result).ForceVersion := true;
      TVRMLRootNode_1(Result).ForceVersionMajor := Lexer.VRMLVerMajor;
      TVRMLRootNode_1(Result).ForceVersionMinor := Lexer.VRMLVerMinor;
    end else
    begin
      Result := TVRMLRootNode_2.Create('', Names.WWWBasePath);
      TVRMLRootNode_2(Result).ForceVersion := true;
      TVRMLRootNode_2(Result).ForceVersionMajor := Lexer.VRMLVerMajor;
      TVRMLRootNode_2(Result).ForceVersionMinor := Lexer.VRMLVerMinor;
    end;
  end;

  procedure ParseProfile;
  begin
    if Lexer.TokenIsKeyword(vkPROFILE) then
    begin
      Lexer.NextToken;
      Lexer.CheckTokenIs(vtName, 'X3D profile name');
      (Result as TVRMLRootNode_2).X3DProfile := Lexer.TokenName;

      Lexer.NextToken;
    end else
      { We allow PROFILE to be omitted, which is not really allowed by
        X3D spec. }
      VRMLWarning(vwSerious, 'X3D PROFILE statement missing');
  end;

  procedure ParseComponents;
  var
    Name: string;
    Level: Integer;
  begin
    while Lexer.TokenIsKeyword(vkCOMPONENT) do
    begin
      Lexer.NextToken;
      Lexer.CheckTokenIs(vtName, 'X3D component name');
      Name := Lexer.TokenName;

      Lexer.NextToken;
      Lexer.CheckTokenIs(vtColon);

      Lexer.NextToken;
      Lexer.CheckTokenIs(vtInteger, 'X3D component level');
      Level := Lexer.TokenInteger;
      (Result as TVRMLRootNode_2).X3DComponentNames.Add(Name);
      (Result as TVRMLRootNode_2).X3DComponentLevels.Add(Level);

      Lexer.NextToken;
    end;
  end;

  procedure ParseMetas;
  var
    Key, Value: string;
  begin
    while Lexer.TokenIsKeyword(vkMETA) do
    begin
      Lexer.NextToken;
      Lexer.CheckTokenIs(vtString, 'X3D meta key');
      Key := Lexer.TokenString;

      Lexer.NextToken;
      Lexer.CheckTokenIs(vtString, 'X3D meta value');
      Value := Lexer.TokenString;
      (Result as TVRMLRootNode_2).X3DMetaKeys.Add(Key);
      (Result as TVRMLRootNode_2).X3DMetaValues.Add(Value);

      Lexer.NextToken;
    end;
  end;

  procedure ParseVRMLStatement;

    { You can safely assume that current token is PROTO or EXTERNPROTO. }
    procedure ParseProtoStatement;
    var
      Proto: TVRMLPrototypeBase;
    begin
      if Lexer.TokenKeyword = vkPROTO then
        Proto := TVRMLPrototype.Create else
        Proto := TVRMLExternalPrototype.Create;
      try
        Proto.Parse(Lexer, Names);
        Proto.PositionInParent := PositionInParent;
        Result.Prototypes.Add(Proto);
      except
        FreeAndNil(Proto); { do not add invalid Proto, free it }
        raise;
      end;
    end;

    procedure ParseRouteStatement;
    var
      Route: TVRMLRoute;
    begin
      Route := TVRMLRoute.Create;
      try
        Route.Parse(Lexer, Names);
        Route.PositionInParent := PositionInParent;
        Result.Routes.Add(Route);
      except
        FreeAndNil(Route); { do not add invalid Route, free it }
        raise;
      end;
    end;

    procedure ParseImportStatement;
    var
      Import: TVRMLImport;
    begin
      Import := TVRMLImport.Create;
      try
        Import.Parse(Lexer, Names);
        Import.PositionInParent := PositionInParent;
        Result.ImportsList.Add(Import);
      except
        FreeAndNil(Import); { do not add invalid Import, free it }
        raise;
      end;
    end;

    procedure ParseExportStatement;
    var
      Export: TVRMLExport;
    begin
      Export := TVRMLExport.Create;
      try
        Export.Parse(Lexer, Names);
        Export.PositionInParent := PositionInParent;
        Result.ExportsList.Add(Export);
      except
        FreeAndNil(Export); { do not add invalid Export, free it }
        raise;
      end;
    end;

    procedure ParseNodeStatement;
    var
      NewNode: TVRMLNode;
    begin
      NewNode := ParseNode(Lexer, Names, false);
      NewNode.PositionInParent := PositionInParent;
      Result.SmartAddChild(NewNode);
    end;

  begin
    if (Lexer.Token = vtKeyword) and
       (Lexer.TokenKeyword in [vkPROTO, vkEXTERNPROTO]) then
      ParseProtoStatement else
    if Lexer.TokenIsKeyword(vkROUTE) then
      ParseRouteStatement else
    if Lexer.TokenIsKeyword(vkIMPORT) then
      ParseImportStatement else
    if Lexer.TokenIsKeyword(vkEXPORT) then
      ParseExportStatement else
      ParseNodeStatement;
  end;

begin
  { We used to have more conservative mechanism here when it comes to using
    CreateRootNode: we used to start with Result = nil.
    First ParseNodeInternal simply set the Result to it's contents.
    ParseProtoStatement, ParseRouteInternal and second and subsequent
    ParseNodeInternal calls called CreateRootNode, and added previous
    content as new root node child.

    This was an unnecessarily complicated mechanism. The history is that
    initially, for correct VRML 1.0, the whole concept of RootGroup was
    not needed. It became needed since VRML 2.0, to
    - store multiple root nodes of VRML 2.0 file
    - and many VRML 1.0 files also used (incorrectly) the "multiple root nodes"
      feature
    - also, VRML 2.0 routes and prototypes declared at global scope had
      to be stored in a root group
    - Finally, ForceVersion mechanism is available for RootGroup to force
      writing of specific VRML version.
    - And for X3D, TVRMLRootNode_2 has to be enhanced
      to keep other top-level X3D data: profile, components, meta statements.

    So now, we simply always create root node by ParseVRMLStatements
    (although the interface should not guarantee this, in case I'll change
    my mind later). }

  Result := CreateRootNode;
  try
    { Parse X3D "configuration information": profile, component and meta
      statements here. }
    if ParseX3DHeader and (Lexer.VRMLVerMajor >= 3) then
    begin
      ParseProfile;
      ParseComponents;
      ParseMetas;
    end;

    PositionInParent := 0;

    if EndToken <> vtEnd then
    begin
      while Lexer.Token <> EndToken do
      begin
        ParseVRMLStatement;
        Inc(PositionInParent);
      end;
    end else
    begin
      { Somewhat more involved version of the loop, the idea is to catch
        EVRMLParserError, EVRMLLexerError happening in the ParseVRMLStatement
        and convert them to VRMLWarning (that merely stop reading VRML file,
        but the file contents read so far are Ok). }
      while Lexer.Token <> EndToken do
      try
        ParseVRMLStatement;
        Inc(PositionInParent);
      except
        on E: EVRMLParserError do
        begin
          VRMLWarning(vwSerious, Format('Error when parsing, will skip the rest of VRML file: %s', [E.Message]));
          Break;
        end;

        on E: EVRMLLexerError do
        begin
          VRMLWarning(vwSerious, Format('Lexical error, will skip the rest of VRML file: %s', [E.Message]));
          Break;
        end;
      end;
    end;
  except FreeAndNil(Result); raise end;
end;

function LoadVRMLClassic(Stream: TPeekCharStream;
  const WWWBasePath: string;
  PrototypeNames: TVRMLPrototypeNames;
  Exported: TVRMLNodeNames): TVRMLNode;
var
  Lexer: TVRMLLexer;
  Names: TVRMLNames;
begin
  Lexer := TVRMLLexer.Create(Stream, false);
  try
    Names := TVRMLNames.Create(false, WWWBasePath, Lexer.VRMLVerMajor, Lexer.VRMLVerMinor);
    try
      Result := ParseVRMLStatements(Lexer, Names, vtEnd, true);
      if PrototypeNames <> nil then
        PrototypeNames.Assign(Names.Prototypes);
      if Exported <> nil then
        Exported.Assign(Names.Exported);
    finally FreeAndNil(Names) end;
  finally FreeAndNil(Lexer) end;
end;

function LoadVRMLClassic(const FileName: string; AllowStdIn: boolean;
  PrototypeNames: TVRMLPrototypeNames;
  Exported: TVRMLNodeNames): TVRMLNode;

  function DoIt(BaseStream: TStream; FreeBaseStream: boolean;
    const WWWBasePath: string): TVRMLNode;
  var
    Stream: TPeekCharStream;
  begin
    Stream := TBufferedReadStream.Create(BaseStream, FreeBaseStream);
    try
      Result := LoadVRMLClassic(Stream, WWWBasePath, PrototypeNames, Exported);
    finally Stream.Free end;
  end;

var
  WWWBasePath: string;
begin
  if AllowStdIn and (FileName = '-') then
    Result := DoIt(StdInStream, false, GetCurrentDir) else
  begin
    WWWBasePath := ExtractFilePath(ExpandFilename(FileName));

    if SameText(ExtractFileExt(FileName), '.gz') or
       SameText(ExtractFileExt(FileName), '.wrz') then
      Result := DoIt(TGZFileStream.Create(FileName, gzOpenRead), true,
        WWWBasePath) else
    begin
      {$ifdef VER2_0_4}
        {$ifdef WIN32}
        { This is a temporary workaround for FPC 2.0.4 bug (already fixed
          in 2.1.4 and current trunk (2007-09-05).
          When opening non-existent file on Windows (on Unixes it's Ok)
          by TFileStream.Create, no exception is raised, instead read procedures
          behave like it was an empty file. This is a minor problem, because
          error message then sound like nonsense for the user: E.g.
            view3dscene not_existing_file.wrl
          says "VRML lexical error at position 0 : Unexpected end of file on the 1st line",
          while it should simply say that file doesn't exist.

          Of course this workaround isn't perfect (file may disappear between
          FileExists check and actual open, file permissions may not allow to read
          etc., that's why usually it's best to left such checks for OS routines called
          by TFileStream constructor) but it should work in usual cases. }
        if not FileExists(FileName) then
          raise EFOpenError.CreateFmt('Unable to open file "%s"', [FileName]);
        {$endif}
      {$endif}

      try
        Result := DoIt(TFileStream.Create(FileName, fmOpenRead), true, WWWBasePath);
      except
        { It's somewhat hacky solution to reopen the file, creating new stream.
          But in practice, this works OK, and it allows us to read files
          compressed by gzip but without indicating this by file extension.
          The other idea would be to pipe the TFileStream through something
          like TDecompressionStream, but

          1. I simply prefer to not filter through yet another stream
             class (we already wrap TFileStream in TBufferedReadStream)
             when I don't have to.

          2. TDecompressionStream doesn't handle gzip compressed data for now
             (it handles zlib-compressed streams, which is not the same thing). }
        on EVRMLGzipCompressed do
          Result := DoIt(TGZFileStream.Create(FileName, gzOpenRead), true, WWWBasePath);
      end;
    end;
  end;
end;

function LoadVRMLClassicFromString(const VRMLContents: string;
  const WWWBasePath: string): TVRMLNode; overload;
var
  Stream: TPeekCharStream;
begin
  Stream := TSimplePeekCharStream.Create(
    TStringStream.Create(VRMLContents), true);
  try
    Result := LoadVRMLClassic(Stream, WWWBasePath);
  finally FreeAndNil(Stream) end;
end;

function ParseVRMLFile(const FileName: string;
  AllowStdIn: boolean;
  PrototypeNames: TVRMLPrototypeNames = nil): TVRMLNode;
begin
  Result := LoadVRMLClassic(FileName, AllowStdIn, PrototypeNames);
end;

{ saving --------------------------------------------------------------------- }

procedure SaveVRMLClassic(Node: TVRMLNode; Stream: TStream;
  const PrecedingComment: string);
var
  SaveProperties: TVRMLSaveToStreamProperties;

  procedure SaveProfile;
  begin
    if (Node is TVRMLRootNode_2) and
       (TVRMLRootNode_2(Node).X3DProfile <> '') then
      SaveProperties.Writeln('PROFILE ' + TVRMLRootNode_2(Node).X3DProfile + NL) else
      { Just output some profile, as every X3D file should have this.
        We actually don't detect for now in any way which profile
        would be best. }
      SaveProperties.Writeln('PROFILE Interchange' + NL);
  end;

  procedure SaveComponents;
  var
    I: Integer;
  begin
    if Node is TVRMLRootNode_2 then
      for I := 0 to TVRMLRootNode_2(Node).X3DComponentNames.Count - 1 do
      begin
        SaveProperties.Writeln(Format('COMPONENT %s:%d' + NL,
          [ TVRMLRootNode_2(Node).X3DComponentNames[I],
            TVRMLRootNode_2(Node).X3DComponentLevels[I] ]));
      end;
  end;

  procedure SaveMetas;
  var
    I: Integer;
  begin
    if Node is TVRMLRootNode_2 then
      for I := 0 to TVRMLRootNode_2(Node).X3DMetaKeys.Count - 1 do
      begin
        SaveProperties.Writeln(Format('META %s %s' + NL,
          [ StringToVRMLStringToken(TVRMLRootNode_2(Node).X3DMetaKeys[I]),
            StringToVRMLStringToken(TVRMLRootNode_2(Node).X3DMetaValues[I])]));
      end;
  end;

const
  VRML10Header = '#VRML V1.0 ascii';
  VRML20Header = '#VRML V2.0 utf8';
  X3DHeader = '#X3D V%d.%d utf8';
var
  VerMajor, VerMinor, SuggestionPriority: Integer;
  VRMLHeader: string;
  NodeNames: TVRMLNodeNames;
begin
  NodeNames := TVRMLNodeNames.Create(false);
  SaveProperties := TVRMLSaveToStreamProperties.Create(Stream);
  try
    if not Node.SuggestedVRMLVersion(VerMajor, VerMinor, SuggestionPriority) then
    begin
      { If nothing is suggested, we use X3D 3.2. Reason:
        - For now, SuggestedVRMLVersion doesn't check IsClauseNames.
          But if IsClauseNames is present anywhere, then this must use VRML >= 2.0
          features ("IS" is keyword only in VRML >= 2.0,
          it will not be understood in VRML 1.0).
        - Besides, we should promote newer VRML standard. }

      VerMajor := 3;
      VerMinor := 2;
    end;

    if VerMajor <= 1 then
      VRMLHeader := VRML10Header else
    if VerMajor = 2 then
      VRMLHeader := VRML20Header else
    if VerMajor >= 3 then
      VRMLHeader := Format(X3DHeader, [VerMajor, VerMinor]);

    SaveProperties.VerMajor := VerMajor;
    SaveProperties.VerMinor := VerMinor;

    SaveProperties.Writeln(VRMLHeader + NL { yes, one more NL, to look good });
    if PrecedingComment <> '' then
      SaveProperties.Writeln('# '+PrecedingComment + NL);

    if VerMajor >= 3 then
    begin
      SaveProfile;
      SaveComponents;
      SaveMetas;
    end;

    { Node may be TVRMLRootNode_* here, that's OK,
      TVRMLRootNode_*.SaveToStream will magically handle this right. }
    Node.SaveToStream(SaveProperties, NodeNames);
  finally
    FreeAndNil(SaveProperties);
    FreeAndNil(NodeNames);
  end;
end;

procedure SaveVRMLClassic(Node: TVRMLNode;
  const Filename, PrecedingComment: string);
var
  Stream: TFileStream;
begin
  Stream := TFileStream.Create(Filename, fmCreate);
  try
    SaveVRMLClassic(Node, Stream, PrecedingComment);
  finally Stream.Free end;
end;

procedure SaveToVRMLFile(Node: TVRMLNode;
  const Filename, PrecedingComment: string);
begin
  SaveVRMLClassic(Node, FileName, PrecedingComment);
end;

{$endif read_implementation}
