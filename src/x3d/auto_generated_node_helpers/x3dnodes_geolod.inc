{ -*- buffer-read-only: t -*-

  Copyright 2015-2017 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in nodes_specification/components/ ,
  - and regenerate include files by running
    nodes_specification/x3d-nodes-to-pascal/x3d-nodes-to-pascal.lpr .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetCenter: TVector3Double;
    procedure SetCenter(const Value: TVector3Double);
    function GetGeoOrigin: TGeoOriginNode;
    procedure SetGeoOrigin(const Value: TGeoOriginNode);
    function GetRange: Single;
    procedure SetRange(const Value: Single);
    function GetBboxCenter: TVector3;
    procedure SetBboxCenter(const Value: TVector3);
    function GetBboxSize: TVector3;
    procedure SetBboxSize(const Value: TVector3);
  public
    property Center: TVector3Double read GetCenter write SetCenter;
    property GeoOrigin: TGeoOriginNode read GetGeoOrigin write SetGeoOrigin;
    property Range: Single read GetRange write SetRange;
    property BboxCenter: TVector3 read GetBboxCenter write SetBboxCenter;
    property BboxSize: TVector3 read GetBboxSize write SetBboxSize;

{$endif read_interface}

{$ifdef read_implementation}

{ TGeoLODNode ----------------------------------------------- }

function TGeoLODNode.GetCenter: TVector3Double;
begin
  Result := FdCenter.Value;
end;

procedure TGeoLODNode.SetCenter(const Value: TVector3Double);
begin
  FdCenter.Send(Value);
end;

function TGeoLODNode.GetGeoOrigin: TGeoOriginNode;
begin
  if FdGeoOrigin.Value is TGeoOriginNode then
    Result := TGeoOriginNode(FdGeoOrigin.Value)
  else
    Result := nil;
end;

procedure TGeoLODNode.SetGeoOrigin(const Value: TGeoOriginNode);
begin
  FdGeoOrigin.Send(Value);
end;

function TGeoLODNode.GetRange: Single;
begin
  Result := FdRange.Value;
end;

procedure TGeoLODNode.SetRange(const Value: Single);
begin
  FdRange.Send(Value);
end;

function TGeoLODNode.GetBboxCenter: TVector3;
begin
  Result := FdBboxCenter.Value;
end;

procedure TGeoLODNode.SetBboxCenter(const Value: TVector3);
begin
  FdBboxCenter.Send(Value);
end;

function TGeoLODNode.GetBboxSize: TVector3;
begin
  Result := FdBboxSize.Value;
end;

procedure TGeoLODNode.SetBboxSize(const Value: TVector3);
begin
  FdBboxSize.Send(Value);
end;

{$endif read_implementation}
