{ -*- buffer-read-only: t -*- }

{ Unit automatically generated by image_to_pas tool,
  to embed images in Pascal source code.
  @exclude (Exclude this unit from PasDoc documentation.) }
unit CastleControlsImages;

interface

uses CastleImages;

var
  Panel: TRGBAlphaImage;

var
  WindowDarkTransparent: TRGBAlphaImage;

var
  Slider: TRGBAlphaImage;

var
  PanelSeparator: TRGBImage;

var
  ButtonPressed: TRGBImage;

var
  ButtonFocused: TRGBImage;

var
  ButtonNormal: TRGBImage;

var
  WindowDark: TRGBImage;

var
  WindowGray: TRGBImage;

var
  ScrollbarFrame: TRGBImage;

var
  ScrollbarSlider: TRGBImage;

var
  SliderPosition: TRGBImage;

implementation

uses SysUtils;

{ Actual image data is included from another file, with a deliberately
  non-Pascal file extension ".image_data". This way ohloh.net will
  not recognize this source code as (uncommented) Pascal source code. }
{$I castlecontrolsimages.image_data}

initialization
  Panel := TRGBAlphaImage.Create(PanelWidth, PanelHeight);
  Move(PanelPixels, Panel.RawPixels^, SizeOf(PanelPixels));
  WindowDarkTransparent := TRGBAlphaImage.Create(WindowDarkTransparentWidth, WindowDarkTransparentHeight);
  Move(WindowDarkTransparentPixels, WindowDarkTransparent.RawPixels^, SizeOf(WindowDarkTransparentPixels));
  Slider := TRGBAlphaImage.Create(SliderWidth, SliderHeight);
  Move(SliderPixels, Slider.RawPixels^, SizeOf(SliderPixels));
  PanelSeparator := TRGBImage.Create(PanelSeparatorWidth, PanelSeparatorHeight);
  Move(PanelSeparatorPixels, PanelSeparator.RawPixels^, SizeOf(PanelSeparatorPixels));
  ButtonPressed := TRGBImage.Create(ButtonPressedWidth, ButtonPressedHeight);
  Move(ButtonPressedPixels, ButtonPressed.RawPixels^, SizeOf(ButtonPressedPixels));
  ButtonFocused := TRGBImage.Create(ButtonFocusedWidth, ButtonFocusedHeight);
  Move(ButtonFocusedPixels, ButtonFocused.RawPixels^, SizeOf(ButtonFocusedPixels));
  ButtonNormal := TRGBImage.Create(ButtonNormalWidth, ButtonNormalHeight);
  Move(ButtonNormalPixels, ButtonNormal.RawPixels^, SizeOf(ButtonNormalPixels));
  WindowDark := TRGBImage.Create(WindowDarkWidth, WindowDarkHeight);
  Move(WindowDarkPixels, WindowDark.RawPixels^, SizeOf(WindowDarkPixels));
  WindowGray := TRGBImage.Create(WindowGrayWidth, WindowGrayHeight);
  Move(WindowGrayPixels, WindowGray.RawPixels^, SizeOf(WindowGrayPixels));
  ScrollbarFrame := TRGBImage.Create(ScrollbarFrameWidth, ScrollbarFrameHeight);
  Move(ScrollbarFramePixels, ScrollbarFrame.RawPixels^, SizeOf(ScrollbarFramePixels));
  ScrollbarSlider := TRGBImage.Create(ScrollbarSliderWidth, ScrollbarSliderHeight);
  Move(ScrollbarSliderPixels, ScrollbarSlider.RawPixels^, SizeOf(ScrollbarSliderPixels));
  SliderPosition := TRGBImage.Create(SliderPositionWidth, SliderPositionHeight);
  Move(SliderPositionPixels, SliderPosition.RawPixels^, SizeOf(SliderPositionPixels));
finalization
  FreeAndNil(Panel);
  FreeAndNil(WindowDarkTransparent);
  FreeAndNil(Slider);
  FreeAndNil(PanelSeparator);
  FreeAndNil(ButtonPressed);
  FreeAndNil(ButtonFocused);
  FreeAndNil(ButtonNormal);
  FreeAndNil(WindowDark);
  FreeAndNil(WindowGray);
  FreeAndNil(ScrollbarFrame);
  FreeAndNil(ScrollbarSlider);
  FreeAndNil(SliderPosition);
end.