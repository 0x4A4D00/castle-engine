{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FWorldAnchorPointPersistent: TCastleVector3Persistent;
  function GetWorldAnchorPointForPersistent: TVector3;
  procedure SetWorldAnchorPointForPersistent(const AValue: TVector3);
published
  { @link(WorldAnchorPoint) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(WorldAnchorPoint) directly.

    @seealso WorldAnchorPoint }
  property WorldAnchorPointPersistent: TCastleVector3Persistent read FWorldAnchorPointPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TJointPulley.GetWorldAnchorPointForPersistent: TVector3;
begin
  Result := WorldAnchorPoint;
end;

procedure TJointPulley.SetWorldAnchorPointForPersistent(const AValue: TVector3);
begin
  WorldAnchorPoint := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FWorldAnchorPointPersistent := TCastleVector3Persistent.Create;
  FWorldAnchorPointPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetWorldAnchorPointForPersistent;
  FWorldAnchorPointPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetWorldAnchorPointForPersistent;
  FWorldAnchorPointPersistent.InternalDefaultValue := WorldAnchorPoint; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FWorldAnchorPointPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FConnectedWorldAnchorPointPersistent: TCastleVector3Persistent;
  function GetConnectedWorldAnchorPointForPersistent: TVector3;
  procedure SetConnectedWorldAnchorPointForPersistent(const AValue: TVector3);
published
  { @link(ConnectedWorldAnchorPoint) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(ConnectedWorldAnchorPoint) directly.

    @seealso ConnectedWorldAnchorPoint }
  property ConnectedWorldAnchorPointPersistent: TCastleVector3Persistent read FConnectedWorldAnchorPointPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TJointPulley.GetConnectedWorldAnchorPointForPersistent: TVector3;
begin
  Result := ConnectedWorldAnchorPoint;
end;

procedure TJointPulley.SetConnectedWorldAnchorPointForPersistent(const AValue: TVector3);
begin
  ConnectedWorldAnchorPoint := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FConnectedWorldAnchorPointPersistent := TCastleVector3Persistent.Create;
  FConnectedWorldAnchorPointPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetConnectedWorldAnchorPointForPersistent;
  FConnectedWorldAnchorPointPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetConnectedWorldAnchorPointForPersistent;
  FConnectedWorldAnchorPointPersistent.InternalDefaultValue := ConnectedWorldAnchorPoint; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FConnectedWorldAnchorPointPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FWorldGroundAnchorPointPersistent: TCastleVector3Persistent;
  function GetWorldGroundAnchorPointForPersistent: TVector3;
  procedure SetWorldGroundAnchorPointForPersistent(const AValue: TVector3);
published
  { @link(WorldGroundAnchorPoint) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(WorldGroundAnchorPoint) directly.

    @seealso WorldGroundAnchorPoint }
  property WorldGroundAnchorPointPersistent: TCastleVector3Persistent read FWorldGroundAnchorPointPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TJointPulley.GetWorldGroundAnchorPointForPersistent: TVector3;
begin
  Result := WorldGroundAnchorPoint;
end;

procedure TJointPulley.SetWorldGroundAnchorPointForPersistent(const AValue: TVector3);
begin
  WorldGroundAnchorPoint := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FWorldGroundAnchorPointPersistent := TCastleVector3Persistent.Create;
  FWorldGroundAnchorPointPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetWorldGroundAnchorPointForPersistent;
  FWorldGroundAnchorPointPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetWorldGroundAnchorPointForPersistent;
  FWorldGroundAnchorPointPersistent.InternalDefaultValue := WorldGroundAnchorPoint; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FWorldGroundAnchorPointPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FConnectedWorldGroundAnchorPointPersistent: TCastleVector3Persistent;
  function GetConnectedWorldGroundAnchorPointForPersistent: TVector3;
  procedure SetConnectedWorldGroundAnchorPointForPersistent(const AValue: TVector3);
published
  { @link(ConnectedWorldGroundAnchorPoint) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(ConnectedWorldGroundAnchorPoint) directly.

    @seealso ConnectedWorldGroundAnchorPoint }
  property ConnectedWorldGroundAnchorPointPersistent: TCastleVector3Persistent read FConnectedWorldGroundAnchorPointPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TJointPulley.GetConnectedWorldGroundAnchorPointForPersistent: TVector3;
begin
  Result := ConnectedWorldGroundAnchorPoint;
end;

procedure TJointPulley.SetConnectedWorldGroundAnchorPointForPersistent(const AValue: TVector3);
begin
  ConnectedWorldGroundAnchorPoint := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FConnectedWorldGroundAnchorPointPersistent := TCastleVector3Persistent.Create;
  FConnectedWorldGroundAnchorPointPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetConnectedWorldGroundAnchorPointForPersistent;
  FConnectedWorldGroundAnchorPointPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetConnectedWorldGroundAnchorPointForPersistent;
  FConnectedWorldGroundAnchorPointPersistent.InternalDefaultValue := ConnectedWorldGroundAnchorPoint; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FConnectedWorldGroundAnchorPointPersistent);
{$endif read_implementation_destructor}

