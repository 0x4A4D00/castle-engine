{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetLanguage: TShaderLanguage;
    procedure SetLanguage(const Value: TShaderLanguage);
    function GetEnabled: Boolean;
    procedure SetEnabled(const Value: Boolean);
  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FFdLanguage: TSFStringEnum;
    { X3D field "language". } { }
    public property FdLanguage: TSFStringEnum read FFdLanguage;
    { X3D field "language". } { }
    property Language: TShaderLanguage read GetLanguage write SetLanguage;

    strict private FFdEnabled: TSFBool;
    { X3D field "enabled". } { }
    public property FdEnabled: TSFBool read FFdEnabled;
    { X3D field "enabled". } { }
    property Enabled: Boolean read GetEnabled write SetEnabled;

    strict private FFdParts: TMFNode;
    { X3D field "parts". } { }
    public property FdParts: TMFNode read FFdParts;
    { Set X3D field "parts". } { }
    procedure SetParts(const Value: array of TEffectPartNode);

{$endif read_interface}

{$ifdef read_implementation}

{ TEffectNode ----------------------------------------------- }

function TEffectNode.GetLanguage: TShaderLanguage;
begin
  Result := TShaderLanguage(FdLanguage.EnumValue);
end;

procedure TEffectNode.SetLanguage(const Value: TShaderLanguage);
begin
  FdLanguage.SendEnumValue(Ord(Value));
end;

function TEffectNode.GetEnabled: Boolean;
begin
  Result := FdEnabled.Value;
end;

procedure TEffectNode.SetEnabled(const Value: Boolean);
begin
  FdEnabled.Send(Value);
end;

procedure TEffectNode.SetParts(const Value: array of TEffectPartNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TEffectPartNode));
  FdParts.Send(A);
end;

class function TEffectNode.ClassX3DType: String;
begin
  Result := 'Effect';
end;

procedure TEffectNode.CreateNode;
begin
  inherited;

  FFdLanguage := TSFStringEnum.Create(Self, False, 'language', ShaderLanguageNames, Ord(slDefault));
   FdLanguage.ChangeAlways := chEverything;
  AddField(FFdLanguage);

  FFdEnabled := TSFBool.Create(Self, True, 'enabled', true);
   FdEnabled.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdEnabled);

  FFdParts := TMFNode.Create(Self, False, 'parts', [TEffectPartNode]);
   FdParts.ChangeAlways := chEverything;
  AddField(FFdParts);
end;

{$endif read_implementation}
