{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetLanguage: TShaderLanguage;
    procedure SetLanguage(const Value: TShaderLanguage);
  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FEventActivate: TSFBoolEvent;
    { X3D in event "activate". } { }
    public property EventActivate: TSFBoolEvent read FEventActivate;

    strict private FEventIsSelected: TSFBoolEvent;
    { X3D out event "isSelected". } { }
    public property EventIsSelected: TSFBoolEvent read FEventIsSelected;

    strict private FEventIsValid: TSFBoolEvent;
    { X3D out event "isValid". } { }
    public property EventIsValid: TSFBoolEvent read FEventIsValid;

    strict private FFdLanguage: TSFStringEnum;
    { X3D field "language". } { }
    public property FdLanguage: TSFStringEnum read FFdLanguage;
    { X3D field "language". } { }
    property Language: TShaderLanguage read GetLanguage write SetLanguage;

{$endif read_interface}

{$ifdef read_implementation}

{ TAbstractShaderNode ----------------------------------------------- }

function TAbstractShaderNode.GetLanguage: TShaderLanguage;
begin
  Result := TShaderLanguage(FdLanguage.EnumValue);
end;

procedure TAbstractShaderNode.SetLanguage(const Value: TShaderLanguage);
begin
  FdLanguage.SendEnumValue(Ord(Value));
end;

class function TAbstractShaderNode.ClassX3DType: String;
begin
  Result := 'X3DShaderNode';
end;

procedure TAbstractShaderNode.CreateNode;
begin
  inherited;

  FEventActivate := TSFBoolEvent.Create(Self, 'activate', true);
  AddEvent(FEventActivate);

  FEventIsSelected := TSFBoolEvent.Create(Self, 'isSelected', false);
  AddEvent(FEventIsSelected);

  FEventIsValid := TSFBoolEvent.Create(Self, 'isValid', false);
  AddEvent(FEventIsValid);

  FFdLanguage := TSFStringEnum.Create(Self, False, 'language', ShaderLanguageNames, Ord(slDefault));
   FdLanguage.ChangeAlways := chEverything;
  AddField(FFdLanguage);

  DefaultContainerField := 'shaders';
end;

{$endif read_implementation}
