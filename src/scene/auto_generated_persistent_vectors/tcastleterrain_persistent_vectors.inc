{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FColor1Persistent: TCastleColorRGBPersistent;
  function GetColor1ForPersistent: TCastleColorRGB;
  procedure SetColor1ForPersistent(const AValue: TCastleColorRGB);
published
  { @link(Color1) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(Color1) directly.

    @seealso Color1 }
  property Color1Persistent: TCastleColorRGBPersistent read FColor1Persistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleTerrain.GetColor1ForPersistent: TCastleColorRGB;
begin
  Result := Color1;
end;

procedure TCastleTerrain.SetColor1ForPersistent(const AValue: TCastleColorRGB);
begin
  Color1 := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FColor1Persistent := TCastleColorRGBPersistent.Create;
  FColor1Persistent.InternalGetValue := {$ifdef FPC}@{$endif}GetColor1ForPersistent;
  FColor1Persistent.InternalSetValue := {$ifdef FPC}@{$endif}SetColor1ForPersistent;
  FColor1Persistent.InternalDefaultValue := Color1; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FColor1Persistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FColor2Persistent: TCastleColorRGBPersistent;
  function GetColor2ForPersistent: TCastleColorRGB;
  procedure SetColor2ForPersistent(const AValue: TCastleColorRGB);
published
  { @link(Color2) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(Color2) directly.

    @seealso Color2 }
  property Color2Persistent: TCastleColorRGBPersistent read FColor2Persistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleTerrain.GetColor2ForPersistent: TCastleColorRGB;
begin
  Result := Color2;
end;

procedure TCastleTerrain.SetColor2ForPersistent(const AValue: TCastleColorRGB);
begin
  Color2 := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FColor2Persistent := TCastleColorRGBPersistent.Create;
  FColor2Persistent.InternalGetValue := {$ifdef FPC}@{$endif}GetColor2ForPersistent;
  FColor2Persistent.InternalSetValue := {$ifdef FPC}@{$endif}SetColor2ForPersistent;
  FColor2Persistent.InternalDefaultValue := Color2; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FColor2Persistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FColor3Persistent: TCastleColorRGBPersistent;
  function GetColor3ForPersistent: TCastleColorRGB;
  procedure SetColor3ForPersistent(const AValue: TCastleColorRGB);
published
  { @link(Color3) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(Color3) directly.

    @seealso Color3 }
  property Color3Persistent: TCastleColorRGBPersistent read FColor3Persistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleTerrain.GetColor3ForPersistent: TCastleColorRGB;
begin
  Result := Color3;
end;

procedure TCastleTerrain.SetColor3ForPersistent(const AValue: TCastleColorRGB);
begin
  Color3 := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FColor3Persistent := TCastleColorRGBPersistent.Create;
  FColor3Persistent.InternalGetValue := {$ifdef FPC}@{$endif}GetColor3ForPersistent;
  FColor3Persistent.InternalSetValue := {$ifdef FPC}@{$endif}SetColor3ForPersistent;
  FColor3Persistent.InternalDefaultValue := Color3; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FColor3Persistent);
{$endif read_implementation_destructor}

