In this directory you can find Lazarus packages that allow
to easily use Kambi VRML game engine in Lazarus programs.

----------------------------------------
I. Packages without components (kambi_base, kambi_glwindow):

Usage:

  1. Open wanted kambi_xxx.lpk file in Lazarus and compile the package.

  2. When you want to use the units included in kambi_xxx.lpk
     in your program, just add this kambi_xxx package
     as a "Required Package" for your project
     (using "Project" -> "Project Inspector" dialog).

     That's it. Lazarus will automatically take care of such things as
     recompiling the units in the package when needed (and with
     proper command-line options) or adding
     appropriate -Fu command-line options for FPC so that FPC
     "sees" units in the package when compiling your program.

Mini-FAQ about these packages:

- Do I need Lazarus to compile Kambi VRML game engine ?

  No. Packages here are provided to easily compile and use the engine
  with Lazarus. But actually units in kambi_vrml_game_engine don't use
  any Lazarus units (LCL) (besides Lazarus-specific components in
  ../src/components/ subdirectory).

  So all you actually need is bare FPC installation.
  Use kambi_vrml_game_engine/Makefile to compile all units and use compile.sh
  scripts to compile each particular program. If you need more flexibility,
  take a look at kambi_vrml_game_engine/kambi.cfg, this specifies actual options
  used by kambi_vrml_game_engine/Makefile and all compile.sh scripts.

- Should I install these packages ?

  Usually, no. Unless you also install kambi_components package (see section below),
  in which case installing kambi_components will require installing also
  kambi_base package.

  If you don't want kambi_components, then there's no point in installing
  kambi_base package (kambi_base doesn't register any components etc.).

  For kambi_glwindow package: you even *should not* install it in Lazarus.
  This package uses GLWindow unit, and merely using this unit
  will cause the program to initialize TGLApplication instance,
  which in turn initiates some talk with WindowManager, GTK toolkit, etc.
  You usually don't want your Lazarus installation to do this.

  So kambi_glwindow package is supposed only to be "used" (that is, required
  by other projects), never installed in Lazarus.

----------------------------------------
II. Package with components (kambi_components):

This is a "normal" Lazarus package, which means that it registers
some Lazarus components (that use my units), and you're supposed to just
install this package in Lazarus. This also automatically installs kambi_base
package --- that's OK.

See ../examples/vrml/lazarus_vrml_browser/
for demo program using this package.

------------------------------------------------------------------------------
Development notes:

How to cope with system-specific units and include files inside
a single Lazarus package file?

  (This concerns stuff inside */unix/, */windows/ subdirectories,
  like base/unix|windows, opengl/unix|windows).

  - Add all files, even the system-specific, to the package
    (this way e.g. dependency checking for .compiled files will be Ok).
    This also means that we have to add all paths,
    both for unix/ and windows/, to the package.

  - All include/units files must have unique names.

    I used to have a hack like this: place file unix/xxx.inc
    and windows/xxx.inc, and then using {$I xxx.inc}
    I knew that the correct (for current platform) xxx.inc would be included.
    This is not possible anymore --- both unix/ and windows/ will be
    on the include path for all of the platforms,
    so you cannot depend on include path to select the proper file.

    Not a real problem, I used this hack only in one place actually...

  - For units in platform-specific dirs, it's crucial to set
    AddToUsesPkgSection Value="False". This means that they
    will be compiled only when pulled by dependencies from other units,
    and all will be Ok.

Michalis
