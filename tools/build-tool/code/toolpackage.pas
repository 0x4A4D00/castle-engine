{
  Copyright 2014-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Packaging data in archives. }
unit ToolPackage;

{$I castleconf.inc}

interface

uses CastleUtils, CastleInternalAutoGenerated, CastleFindFiles;

type
  TPackageFormat = (
    pfDefault,
    pfDirectory,
    pfZip,
    pfTarGz,
    pfDeb,
    pfIosArchiveDevelopment,
    pfIosArchiveAdHoc,
    pfIosArchiveAppStore
  );
  TPackageFormatNoDefault = pfDirectory..High(TPackageFormat);

  { Package a project to a directory. }
  TPackageDirectory = class
  private
    { Total size of all binaries in the project, required for Debian metadata }
    BinariesSize: Int64;

    TemporaryDir: string;
    FPath: string;
    FTopDirectoryName: string;

    { Absolute path (ends with path delimiter) under which you should
      store your files. They will end up being packaged,
      under TopDirectoryName. }
    property Path: string read FPath;
    property TopDirectoryName: string read FTopDirectoryName;
    { Helper to find total size of all files inside the folder,
      To satisfy FindFile syntax has to be of Object }
    procedure FoundFile(const FileInfo: TFileInfo; var StopSearch: Boolean);
  public
    { Create a package.

      @param(ATopDirectoryName is the name of the main directory that will
        be visible in the archive, it's usually just a project name.) }
    constructor Create(const ATopDirectoryName: string);
    destructor Destroy; override;

    { Create final archive. It will be placed within OutputProjectPath.
      PackageName should contain only the base name, without extension. }
    procedure Make(const OutputProjectPath: string; const PackageFileName: string;
      const PackageFormat: TPackageFormatNoDefault);

    { Add file to the package.

      @param SourceFileName Filename existing on disk right now, must be an absolute filename.

      @param DestinationFileName Name in package, must be relative within package.

      @param MakeExecutable Set the Unix executable bit on given file. }
    procedure Add(const SourceFileName, DestinationFileName: string;
      const MakeExecutable: Boolean = false);

    { Generate auto_generated/CastleDataInformation.xml file inside
      DataName subdirectory of the archive. }
    procedure AddDataInformation(const DataName: String);
  end;

{ Generate auto_generated/CastleDataInformation.xml file inside
  CurrentDataPath, if it exists.
  CurrentDataPath may but doesn't have to end with PathDelim. }
procedure GenerateDataInformation(const CurrentDataPath: String);

function PackageFormatToString(const O: TPackageFormat): string;
function StringToPackageFormat(const S: string): TPackageFormat;

implementation

uses SysUtils, Process, {$ifdef UNIX} BaseUnix, {$endif}
  CastleFilesUtils, CastleLog, CastleURIUtils,
  CastleStringUtils, CastleInternalDirectoryInformation, CastleDownload,
  ToolCommonUtils, ToolUtils;

{ TPackageDirectory ---------------------------------------------------------- }

constructor TPackageDirectory.Create(const ATopDirectoryName: string);
begin
  inherited Create;
  FTopDirectoryName := ATopDirectoryName;

  TemporaryDir := CreateTemporaryDir;

  FPath := InclPathDelim(TemporaryDir) + TopDirectoryName;
  CheckForceDirectories(FPath);
  FPath += PathDelim;
end;

destructor TPackageDirectory.Destroy;
begin
  RemoveNonEmptyDir(TemporaryDir, true);
  inherited;
end;

procedure TPackageDirectory.FoundFile(const FileInfo: TFileInfo; var StopSearch: Boolean);
begin
  BinariesSize += FileInfo.Size;
end;

procedure TPackageDirectory.Make(const OutputProjectPath: string;
  const PackageFileName: string; const PackageFormat: TPackageFormatNoDefault);

  procedure PackageCommand(const PackagingExeName: String; const PackagingParameters: array of String);
  var
    FullPackageFileName, ProcessOutput, CommandExe: string;
    ProcessExitStatus: Integer;
  begin
    CommandExe := FindExe(PackagingExeName);
    if CommandExe = '' then
      raise Exception.CreateFmt('Cannot find "%s" program on $PATH. Make sure it is installed, and available on $PATH', [
        PackagingExeName
      ]);
    MyRunCommandIndir(TemporaryDir, CommandExe,
      PackagingParameters,
      ProcessOutput, ProcessExitStatus);

    if Verbose then
    begin
      Writeln('Executed package process, output:');
      Writeln(ProcessOutput);
    end;

    if ProcessExitStatus <> 0 then
      raise Exception.CreateFmt('Package process exited with error, status %d', [ProcessExitStatus]);

    FullPackageFileName := CombinePaths(OutputProjectPath, PackageFileName);
    DeleteFile(FullPackageFileName);
    CheckRenameFile(InclPathDelim(TemporaryDir) + PackageFileName, FullPackageFileName);
    Writeln('Created package ' + PackageFileName + ', size: ', SizeToStr(FileSize(FullPackageFileName)));
  end;

  procedure PackageDeb;
  var
    ProjectName: String = 'Kryftolike';
    AppCategoryFolder: String = 'games';
    AppCategoryDebian: String = 'Games/Adventure';
    ExecutableName: String = 'kryftolike';
    ProjectVersionString: String = '1.7.454';
    ProjectComment: String = 'Roguelite hide-and-seek game on an infinite map';
    CategoriesString: String = 'Game;RolePlaying;';
    ProjectIconFile: String = 'icon.xpm';
    ArchitectureString: String = 'amd64';
    MaintainerString: String = 'EugeneLoza';

    PathToExecutableLocal, PathToExecutableUnix: String;
    PathToIconFileLocal, PathToIconFileUnix: String;
    ShareDir: String;
    TextWriter: TTextWriter;
    OutString: String;

  begin
    if DirectoryExists(PackageFileName) then
      RemoveNonEmptyDir(PackageFileName);

    // Copy the binaries

    PathToExecutableUnix := '/usr/' + AppCategoryFolder + '/' + LowerCase(ProjectName);
    PathToExecutableLocal := StringReplace(PathToExecutableUnix, '/', PathDelim, [rfReplaceAll]);
    CopyDirectory(Path, PackageFileName + PathToExecutableLocal);
    ShareDir := PackageFileName + PathDelim + 'usr' + PathDelim + 'share';
    CreateDir(ShareDir);

    // Calculate binaries size

    BinariesSize := 0;
    FindFiles(PackageFileName + PathToExecutableLocal, '*', false, {$ifdef CASTLE_OBJFPC}@{$endif} FoundFile, [ffRecursive]);

    // Copy XPM icon

    CreateDir(ShareDir + PathDelim + 'pixmaps');
    PathToIconFileUnix := '/usr/share/pixmaps/' + ExecutableName + '.xpm';
    PathToIconFileLocal := StringReplace(PathToIconFileUnix, '/', PathDelim, [rfReplaceAll]);
    CheckCopyFile(ProjectIconFile, PackageFileName + PathToIconFileLocal);

    // Create menu item for the game

    CreateDir(ShareDir + PathDelim + 'menu');
    TextWriter := TTextWriter.Create(ShareDir + PathDelim + 'menu' + PathDelim + LowerCase(ProjectName));
    TextWriter.Write(
      '?package(' + LowerCase(ProjectName) + '): \' + NL +
      'needs="X11" \' + NL +
      'section="' + AppCategoryDebian + '" \' + NL +
      'title="' + ProjectName + '" \' + NL +
      'command="bash -c ''cd ' + PathToExecutableUnix + ' && ./' + ExecutableName + '''" \' + NL +
      'icon="' + PathToIconFileUnix +'"'
      );
    FreeAndNil(TextWriter);

    CreateDir(ShareDir + PathDelim + 'applications');
    TextWriter := TTextWriter.Create(ShareDir + PathDelim + 'applications' + PathDelim + ExecutableName + '.desktop');
    TextWriter.Write(
      '[Desktop Entry]' + NL +
      'Version=' + ProjectVersionString + NL +
      'Terminal=false' + NL +
      'Exec=bash -c ''cd ' + PathToExecutableUnix + ' && ./' + ExecutableName + '''' + NL +
      'Icon=' + PathToIconFileUnix + NL +
      'Type=Application' + NL +
      'Categories=' + CategoriesString + NL +
      'Name=' + ProjectName + NL +
      'Comment=' + ProjectComment
      );
    FreeAndNil(TextWriter);

    CreateDir(PackageFileName + PathDelim + 'DEBIAN');
    TextWriter := TTextWriter.Create(PackageFileName + PathDelim + 'DEBIAN' + PathDelim + 'control');
    TextWriter.Write(
      'Package: ' + LowerCase(ProjectName) + NL +
      'Version: ' + ProjectVersionString + NL +
      'Section: ' + AppCategoryFolder + NL +
      'Priority: optional' + NL +
      'Architecture: ' + ArchitectureString + NL +
      'Maintainer: ' + MaintainerString + NL +
      'Installed-Size: ' + IntToStr(BinariesSize div 1024) + NL +
      'Depends: libopenal1, libpng16-16, zlib1g, libvorbis0a, libvorbisfile3, libfreetype6, libgl1-mesa-dri, libgtk2.0-0' + NL +
      'Description: ' + ProjectName + NL +
      ' ' + ProjectComment + NL //final new line
      );
    FreeAndNil(TextWriter);

    // Post-installation running - assign executable permissions

    TextWriter := TTextWriter.Create(PackageFileName + PathDelim + 'DEBIAN' + PathDelim + 'postinst');
    TextWriter.Write(
      '#!/bin/sh' + NL + NL +
      'chmod +x ' + PathToExecutableUnix + '/' + ExecutableName + NL + NL +
      'exit 0'
      );
    FreeAndNil(TextWriter);
    fpChmod (PackageFileName + PathDelim + 'DEBIAN' + PathDelim + 'postinst', &555);

    // Workaround, we need to execute a shell script somehow

    TextWriter := TTextWriter.Create(OutputProjectPath + 'package-debian.sh');
    TextWriter.Write(
      'cd ' + PackageFileName + NL +
      'find -type f | egrep -v ''^\./DEBIAN'' | xargs --replace=hh -n1 md5sum "hh" | sed ''s/\ \.\///'' > DEBIAN/md5sums' + NL +
      'cd ..' + NL +
      'dpkg-deb --build ' + PackageFileName
      );
    FreeAndNil(TextWriter);

    //RunCommandSimple('sh ' + OutputProjectPath + 'package-debian.sh', []);
    RunCommand('/bin/bash', ['package-debian.sh'], OutString);
    WriteLn(OutString);
  end;

begin
  case PackageFormat of
    pfZip      : PackageCommand('zip', ['-q', '-r', PackageFileName, TopDirectoryName]);
    pfTarGz    : PackageCommand('tar', ['czf', PackageFileName, TopDirectoryName]);
    pfDeb      : PackageDeb;
    pfDirectory:
      begin
        if DirectoryExists(PackageFileName) then
          RemoveNonEmptyDir(PackageFileName);
        CopyDirectory(Path, PackageFileName);
        Writeln('Created directory ' + PackageFileName);
      end;
    else raise EInternalError.Create('TPackageDirectory.Make PackageFormat?');
  end;
end;

procedure TPackageDirectory.Add(const SourceFileName, DestinationFileName: string;
  const MakeExecutable: Boolean);

  procedure DoMakeExecutable(const Name: string);
  {$ifdef UNIX}
  var
    ChmodResult: CInt;
  begin
    ChmodResult := FpChmod(Path + Name,
      S_IRUSR or S_IWUSR or S_IXUSR or
      S_IRGRP or            S_IXGRP or
      S_IROTH or            S_IXOTH);
    if ChmodResult <> 0 then
      WritelnWarning('Package', Format('Error setting executable bit on "%s": %s', [
        Path + Name,
        SysErrorMessage(ChmodResult)
      ]));
  {$else}
  begin
    WritelnWarning('Package', 'Packaging for a platform where UNIX permissions matter, but we cannot set "chmod" on this platform. This usually means that you package for Unix from Windows, and means that "executable" bit inside binary in tar.gz archive may not be set --- archive may not be 100% comfortable for Unix users');
    {$endif}
  end;

begin
  SmartCopyFile(SourceFileName, Path + DestinationFileName);
  WritelnVerbose('Package file: ' + DestinationFileName);

  if MakeExecutable then
  begin
    { For OSes where chmod matters, make sure to set it before packing }
    WritelnVerbose('Setting Unix executable permissions: ' + DestinationFileName);
    DoMakeExecutable(DestinationFileName);
  end;
end;

procedure TPackageDirectory.AddDataInformation(const DataName: String);
begin
  GenerateDataInformation(Path + DataName);
end;

{ global --------------------------------------------------------------------- }

procedure GenerateDataInformation(const CurrentDataPath: String);
var
  DataInformationDir, DataInformationFileName: String;
  DataInformation: TDirectoryInformation;
  DirsCount, FilesCount, FilesSize: QWord;
begin
  if DirectoryExists(CurrentDataPath) then
  begin
    DataInformationDir := InclPathDelim(CurrentDataPath) + 'auto_generated';
    CheckForceDirectories(DataInformationDir);
    DataInformationFileName := DataInformationDir + PathDelim + 'CastleDataInformation.xml';
    { Do not include CastleDataInformation.xml itself on a list of existing files,
      since we don't know it's size yet. }
    DeleteFile(DataInformationFileName);

    DataInformation := TDirectoryInformation.Create;
    try
      DataInformation.Generate(FilenameToURISafe(CurrentDataPath));
      DataInformation.SaveToFile(FilenameToURISafe(DataInformationFileName));

      DataInformation.Sum(DirsCount, FilesCount, FilesSize);
      Writeln('Generated CastleDataInformation.xml.');
      Writeln(Format('Project data contains %d directories, %d files, total (uncompressed) size %s.',
        [DirsCount, FilesCount, SizeToStr(FilesSize)]));
    finally FreeAndNil(DataInformation) end;
  end;
end;

const
  PackageFormatNames: array [TPackageFormat] of string = (
    'default',
    'directory',
    'zip',
    'targz',
    'deb',
    'ios-archive-development',
    'ios-archive-ad-hoc',
    'ios-archive-app-store'
  );

function PackageFormatToString(const O: TPackageFormat): string;
begin
  Result := PackageFormatNames[O];
end;

function StringToPackageFormat(const S: string): TPackageFormat;
begin
  for Result in TPackageFormat do
    if AnsiSameText(PackageFormatNames[Result], S) then
      Exit;
  raise Exception.CreateFmt('Invalid package-format name "%s"', [S]);
end;

end.
