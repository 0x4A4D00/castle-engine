VRML 97 TODO items:

WWW:
- kambi_vrml_examples: name it "Kambi VRML test suite",
  convert README to html and put on page (as well as in the archive)
- "sources" page rename and rearrange to "Kambi 3D game VRML engine"
- add page "VRML implementation status",
  move there bottom on view3dscene docs

- grep for _1 where I used only VRML 1.0 nodes versions, replace with two versions to use corresponding VRML 2.0 nodes too.

- kambi_vrml_examples: do there VRML 2.0 counterpart, test

- change FreeRemovingFromAllParentNodes to also remove from ParentFields,
  rename back to FreeRemovingFromAllParents.

- vrmlscenewaypoints.pas:
  now uses ParentNodes, should also include ParentFields ?
  Same for CastleLevel.

- castledebugmenu: fix to include also VRML 97 light nodes,
  not only _1 nodes.

- move everything you can from
  /win/mojewww/camelot/kambi_vrml_extensions.php
  also to VRML 2.0, check it.

- What about ray-tracer --- nodes should work there, lights will probably have
  to be corrected.

- KambiTriangulation should also be fixed
  just like DirectionalLight.

- Viewpoint: HomeCameraUp can be different than starting CameraUp for Viewpoint

----------------------------------------
- Implement Prototypes, Event routing. Relevant spec parts:
  - 4.2.4 Prototypes
  - 4.2.5 Event routing
  - 4.3.2 Statements
    After the required header, a VRML file may contain any
    combination of the following:
    1. Any number of PROTO or EXTERNPROTO statements
    (see 4.8, Prototype semantics);
    ...
    4. Any number of ROUTE statements (see 4.10.2, Route semantics).
  - 4.3.3 Node statement syntax
    A node's body consists of any number of ..., IS statements,
    ROUTE statements, PROTO statements or EXTERNPROTO statements, in any order.
  - 4.3.5 PROTO statement syntax
  - 4.3.6 IS statement syntax
  - 4.3.7 EXTERNPROTO statement syntax
  - 4.3.9 ROUTE statement syntax
- Check what nodes are allowed where:
  - Root nodes shall be children nodes (see 4.6.5, Grouping and children nodes).
- Resolving url fields (MFString, see 4.5.2, 4.5.3).
  Use Synapse or curl (probably both, by compile-time define;
  make the URL system "pluggable", by default "null" system is plugged
  so neither Synapse nor curl is used.)
- 4.5.4 Scripting language protocols
- check

   The following node types are geometry nodes:
    * Box
    * Cone
    * Contour2D
    * Cylinder
    * ElevationGrid
    * Extrusion
    * GeoElevationGrid
    * IndexedFaceSet
    * IndexedLineSet
    * NurbsCurve
    * NurbsSurface
    * PointSet
    * Sphere
    * Text
    * TrimmedSurface

  appearance must be Appearance

Nodes of the following type may be specified in the material field of the Appearance node:

    * Material

Nodes of the following types may be specified by the texture field of the Appearance node:

    * ImageTexture
    * PixelTexture
    * MovieTexture

Nodes of the following types may be specified in the textureTransform field of the Appearance node:

    * TextureTransform

The following node types are grouping nodes:

    * Anchor             (ChildrenField overriden)
    * Billboard          (ChildrenField overriden)
    * Collision          (ChildrenField overriden)
    * CoordinateDeformer (ChildrenField overriden)
    * GeoLocation        (ChildrenField overriden)
    * GeoLOD
    * Group              (ChildrenField overriden)
    * Inline
    * InlineLoadControl
    * LOD                (ChildrenField overriden)
    * NurbsGroup         (ChildrenField overriden)
    * Switch             (ChildrenField overriden)
    * Transform          (ChildrenField overriden)

The following node types are children nodes:

    * Anchor
    * Background
    * Billboard
    * Collision
    * ColorInterpolator
    * CoordinateInterpolator
    * CylinderSensor
    * DirectionalLight
    * Fog
    * GeoLocation
    * GeoLOD
    * GeoMetadata
    * GeoPositionInterpolator



    * GeoTouchSensor
    * GeoViewpoint
    * Group
    * Inline
    * LOD
    * NavigationInfo
    * NormalInterpolator
    * NurbsPositionInterpolator
    * OrientationInterpolator
    * PlaneSensor
    * PointLight
    * PositionInterpolator
    * ProximitySensor



    * ScalarInterpolator
    * Script
    * Shape
    * Sound
    * SpotLight
    * SphereSensor
    * Switch
    * TimeSensor
    * TouchSensor
    * Transform
    * Viewpoint
    * VisibilitySensor
    * WorldInfo

The following node types are not valid as children nodes:

    * Appearance
    * AudioClip
    * Box
    * Color
    * Cone
    * Contour2D
    * Coordinate
    * Cylinder
    * ElevationGrid
    * Extrusion



    * GeoCoordinate
    * GeoElevationGrid
    * GeoOrigin
    * ImageTexture
    * IndexedFaceSet
    * IndexedLineSet
    * Material
    * MovieTexture
    * Normal
    * NurbsCurve



    * NurbsCurve2D
    * NurbsSurface
    * NurbsTextureSurface
    * PointSet
    * Polyline2D
    * Sphere
    * Text
    * TextureCoordinate
    * TextureTransform
    * TrimmedSurface

- PointLight and SpotLight illuminate all objects in the world that fall within their volume of lighting influence regardless of location within the transformation hierarchy. PointLight defines this volume of influence as a sphere centred at the light (defined by a radius). SpotLight defines the volume of influence as a solid angle defined by a radius and a cutoff angle. DirectionalLight nodes illuminate only the objects descended from the light's parent grouping node, including any descendent children of the parent grouping nodes.
- 4.6.7 Sensor nodes
  ...
  and further 4.x, with the exception of 4.13, 4.14

----------------------------------------
VRML 97 nodes done (parsed and handled correctly):
- DirectionalLight
  (almost: DirectionalLight nodes illuminate only the objects descended from the light's parent grouping node, including any descendent children of the parent grouping nodes.
  This is almost what I do (that's VRML 1.0 way), but in my version DirectionalLight affects only subsequent nodes, not previous in it's parent...
  )

- PointLight
  (almost: see above "PointLight and SpotLight illuminate all objects...").

- SpotLight
  (almost:
  see above "PointLight and SpotLight illuminate all objects...";
  also note that beamWidth idea cannot be translated to a standard
  OpenGL spotlight, so if you set beamWidth < cutOffAngle then the light
  will not look exactly VRML 2.0-spec complaint)

- Background, Fog, NavigationInfo, WorldInfo
  (were already done as VRML 1.0 extension; WorldInfo.title is displayed
  by view3dscene on window's caption)

- Switch, Group
- Transform
- Sphere, Box
- Material
- Cone, Cylinder
- PixelTexture
- TextureTransform
- ImageTexture
- Inline, InlineLoadControl

- LOD
  (but we almost render highest-precision node, ignoring
  distance of node to the viewer;
  like with VRML 1.0 LOD node)

- Anchor
  (but clicking on anchor doesn't do anything;
  it works just like Group node for now;
  like with VRML 1.0 WWWAnchor node)

- Text, FontStyle
  Without:

    FontStyle properties:
    6.22.3 Direction and justification
    (horizontal, leftToRight, topToBottom values are ignored and
    things are always handled like they had default values
    (TRUE, TRUE, TRUE) )
    6.22.4 Language
    (language)

    (family, style handled;  will be)

    Text properties:
    length, maxEntent are ignored (and handled like they had
    default values, which means that the text is not stretched)

    (the rest (size, spacing, justify, family, style) is handled
    fully, so Text node is still very useful)

- Viewpoint
  (view3dscene displays also nice menu allowing you to jump
  to any efined viewpoint, displaying viewpoints descriptions;
  extensive tests of various viewpoint properties, includind fieldOfView,
  are inside kambi_vrml_examples/vrml_2/viewpoint_*.wrl files)

Nearest plans:
Indexed things and Coordinate3 and friends
make URLs actually work
check NIST tests
check blender exported files

----------------------------------------
Tests passed:
- Tested on my test suite kambi_vrml_examples in vrml_2 subdir
- Passes first 2 examples from VRML 2.0 spec (D.2 and D.3)
- From [http://www.itl.nist.gov/div897/ctg/vrml/chaco/chaco.html]:
  passes every file (that exists on server &mdash; some are missing) besides:
    simple/face, line,
    pointset/points
    cameras
    textures/face*, line, repeat5, sfimage*, t2face*
    recurse.wrl crashes --- should fail nicer
