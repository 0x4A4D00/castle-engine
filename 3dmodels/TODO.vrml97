VRML 97 TODO items:

- check NIST tests

- check blender exported files

WWW:
- kambi_vrml_examples: name it "Kambi VRML test suite",
  convert README to html and put on page (as well as in the archive)
- "sources" page rename and rearrange to "Kambi 3D game VRML engine"
- fix WWW pages for VRML 1 support
    grep -n -i -e "vrml 1.0" *.php
  Add links to vrml_implementation_status and kambi_vrml_test_suite
  (from index, from rayhunter and view3dscene, from kambi_vrml_extensions,
  and between them)

- test level in VRML 2.0 for castle

- grep for _1 where I used only VRML 1.0 nodes versions, replace with two versions to use corresponding VRML 2.0 nodes too.

- change FreeRemovingFromAllParentNodes to also remove from ParentFields,
  rename back to FreeRemovingFromAllParents.

- vrmlscenewaypoints.pas:
  now uses ParentNodes, should also include ParentFields ?
  Same for CastleLevel.

- castledebugmenu: fix to include also VRML 97 light nodes,
  not only _1 nodes.

- move everything you can from
  /win/mojewww/camelot/kambi_vrml_extensions.php
  also to VRML 2.0, check it.
  Remaining things:
  - mirror and Phong's BRDF fields for materials

- What about ray-tracer --- nodes should work there, lights will probably have
  to be corrected.

- KambiTriangulation should also be fixed
  just like DirectionalLight.

- Viewpoint: HomeCameraUp can be different than starting CameraUp for Viewpoint

- kambi_vrml_examples: do VRML 2.0 counterpart of all useful VRML 1.0 tests.
  Remaining sensible things to translate are:
  castle.wrl, house_behind_the_glass.wrl, materials.wrl.

----------------------------------------
- Implement Prototypes, Event routing. Relevant spec parts:
  - 4.2.4 Prototypes
  - 4.2.5 Event routing
  - 4.3.2 Statements
    After the required header, a VRML file may contain any
    combination of the following:
    1. Any number of PROTO or EXTERNPROTO statements
    (see 4.8, Prototype semantics);
    ...
    4. Any number of ROUTE statements (see 4.10.2, Route semantics).
  - 4.3.3 Node statement syntax
    A node's body consists of any number of ..., IS statements,
    ROUTE statements, PROTO statements or EXTERNPROTO statements, in any order.
  - 4.3.5 PROTO statement syntax
  - 4.3.6 IS statement syntax
  - 4.3.7 EXTERNPROTO statement syntax
  - 4.3.9 ROUTE statement syntax

- 4.5.4 Scripting language protocols
----------------------------------------
- Check what nodes are allowed where:
  - Root nodes shall be children nodes (see 4.6.5, Grouping and children nodes).

   The following node types are geometry nodes:
    * Box
    * Cone
    * Contour2D
    * Cylinder
    * ElevationGrid
    * Extrusion
    * GeoElevationGrid
    * IndexedFaceSet
    * IndexedLineSet
    * NurbsCurve
    * NurbsSurface
    * PointSet
    * Sphere
    * Text
    * TrimmedSurface

  appearance must be Appearance

Nodes of the following type may be specified in the material field of the Appearance node:

    * Material

Nodes of the following types may be specified by the texture field of the Appearance node:

    * ImageTexture
    * PixelTexture
    * MovieTexture

Nodes of the following types may be specified in the textureTransform field of the Appearance node:

    * TextureTransform

The following node types are grouping nodes:

    * Anchor             (ChildrenField overriden)
    * Billboard          (ChildrenField overriden)
    * Collision          (ChildrenField overriden)
    * CoordinateDeformer (ChildrenField overriden)
    * GeoLocation        (ChildrenField overriden)
    * GeoLOD
    * Group              (ChildrenField overriden)
    * Inline
    * InlineLoadControl
    * LOD                (ChildrenField overriden)
    * NurbsGroup         (ChildrenField overriden)
    * Switch             (ChildrenField overriden)
    * Transform          (ChildrenField overriden)

The following node types are children nodes:

    * Anchor
    * Background
    * Billboard
    * Collision
    * ColorInterpolator
    * CoordinateInterpolator
    * CylinderSensor
    * DirectionalLight
    * Fog
    * GeoLocation
    * GeoLOD
    * GeoMetadata
    * GeoPositionInterpolator



    * GeoTouchSensor
    * GeoViewpoint
    * Group
    * Inline
    * LOD
    * NavigationInfo
    * NormalInterpolator
    * NurbsPositionInterpolator
    * OrientationInterpolator
    * PlaneSensor
    * PointLight
    * PositionInterpolator
    * ProximitySensor



    * ScalarInterpolator
    * Script
    * Shape
    * Sound
    * SpotLight
    * SphereSensor
    * Switch
    * TimeSensor
    * TouchSensor
    * Transform
    * Viewpoint
    * VisibilitySensor
    * WorldInfo

The following node types are not valid as children nodes:

    * Appearance
    * AudioClip
    * Box
    * Color
    * Cone
    * Contour2D
    * Coordinate
    * Cylinder
    * ElevationGrid
    * Extrusion



    * GeoCoordinate
    * GeoElevationGrid
    * GeoOrigin
    * ImageTexture
    * IndexedFaceSet
    * IndexedLineSet
    * Material
    * MovieTexture
    * Normal
    * NurbsCurve



    * NurbsCurve2D
    * NurbsSurface
    * NurbsTextureSurface
    * PointSet
    * Polyline2D
    * Sphere
    * Text
    * TextureCoordinate
    * TextureTransform
    * TrimmedSurface

----------------------------------------
- Resolving url fields (MFString, see 4.5.2, 4.5.3).
  Use Synapse or curl (probably both, by compile-time define;
  make the URL system "pluggable", by default "null" system is plugged
  so neither Synapse nor curl is used.)

----------------------------------------
- 4.6.7 Sensor nodes
  ...
  and further 4.x spec parts, with the exception of 4.13, 4.14

----------------------------------------