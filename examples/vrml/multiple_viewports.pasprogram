{
  Copyright 2010 Michalis Kamburelis.

  This file is part of "Kambi VRML game engine".

  "Kambi VRML game engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Kambi VRML game engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Demo of using custom viewports (TKamViewport) to view the same 3D world
  (scene manager in TKamSceneManager). }

uses GL, GLWindow, VRMLNodes, VRMLScene, VRMLGLScene, KambiSceneManager,
  UIControls, Cameras, Quaternions, VectorMath, Math, GLButtons;

var
  Window: TGLUIWindow;
  SceneManager: TKamSceneManager;
  Scene: TVRMLGLScene;
  Viewports: array [0..3] of TKamViewport;
  OpenButton: TGLButton;

type
  TBackground = class(TUIControl)
  public
    function DrawStyle: TUIControlDrawStyle; override;
    procedure Draw(const Focused: boolean); override;
  end;

function TBackground.DrawStyle: TUIControlDrawStyle;
begin
  { 3D, because we want to be drawn before other 3D objects }
  Result := ds3D;
end;

procedure TBackground.Draw(const Focused: boolean);
begin
  glClearColor(0.5, 0.5, 1, 1);
  glClear(GL_COLOR_BUFFER_BIT);
end;

procedure Resize(Glwin: TGLWindow);
const
  Margin = 5;
  ButtonHeight = 100;
var
  W, H: Integer;
begin
  W := Glwin.Width div 2;
  H := (Glwin.Height - ButtonHeight) div 2;

  Viewports[0].Left   :=       Margin;
  Viewports[0].Bottom :=       Margin + ButtonHeight;
  Viewports[0].Width  := W - 2*Margin;
  Viewports[0].Height := H - 2*Margin;

  Viewports[1].Left   := W +   Margin;
  Viewports[1].Bottom :=       Margin + ButtonHeight;
  Viewports[1].Width  := W - 2*Margin;
  Viewports[1].Height := H - 2*Margin;

  Viewports[2].Left   :=       Margin;
  Viewports[2].Bottom := H +   Margin + ButtonHeight;
  Viewports[2].Width  := W - 2*Margin;
  Viewports[2].Height := H - 2*Margin;

  Viewports[3].Left   := W +   Margin;
  Viewports[3].Bottom := H +   Margin + ButtonHeight;
  Viewports[3].Width  := W - 2*Margin;
  Viewports[3].Height := H - 2*Margin;

  OpenButton.Left := Margin;
  OpenButton.Bottom := Margin;
  OpenButton.Width := Glwin.Width - 2*Margin;
  OpenButton.Height := ButtonHeight - 2*Margin;
end;

var
  I: Integer;
begin
  Scene := TVRMLGLScene.Create(Application);
  //Scene.Load('../../../kambi_vrml_test_suite/x3d/kambi_extensions/shadows_dynamic.x3dv');
  Scene.Load('models/teapot.x3dv');
  Scene.Spatial := [ssRendering, ssDynamicCollisions];
  Scene.ProcessEvents := true;

  Window := TGLUIWindow.Create(Application);

  SceneManager := TKamSceneManager.Create(Application);
  SceneManager.Items.Add(Scene);
  SceneManager.MainScene := Scene;
  SceneManager.DefaultViewport := false;
  Window.Controls.Add(SceneManager);

  for I := 0 to High(Viewports) do
  begin
    Viewports[I] := TKamViewport.Create(Application);
    Viewports[I].SceneManager := SceneManager;
    Viewports[I].FullSize := false;
    Viewports[I].Camera := SceneManager.CreateDefaultCamera(SceneManager);
    { test shadows: }
    Viewports[I].ShadowVolumesPossible := true;
    Viewports[I].ShadowVolumes := true;
    { set different camera views for all viewports, to make it interesting }
    if (I < 3) and (Viewports[I].Camera is TExamineCamera) then
      TExamineCamera(Viewports[I].Camera).Rotations :=
        QuatFromAxisAngle(UnitVector3Single[I], Pi/2);
    { The initial Resize event will position viewports correctly }
    Window.Controls.Add(Viewports[I]);
  end;

  Assert(SceneManager.Viewports.Count = High(Viewports) + 1);

  { scene manager needs assigned camera to make a headlight }
  { TODO: this resets Camera events and Container.
    Right now, one camera cannot be simultaneously on scnee manager
    and viewports. So assign here new camera... }
  SceneManager.Camera := SceneManager.CreateDefaultCamera(SceneManager);

  OpenButton := TGLButton.Create(Application);
  OpenButton.Caption := 'Open';
  Window.Controls.Add(OpenButton);

  { add a background, since our viewpoints (deliberately, for demo)
    do not cover whole window. }
  Window.Controls.Add(TBackground.Create(Application));

  Window.OnResize := @Resize;
  Window.InitAndRun;
end.
