#X3D V3.2 utf8
PROFILE Interactive

# Since Blender -> X3D exporter is not perfect (we cannot express in Blender
# everything we want, in a way we want) we add some X3D nodes by hand.
# We use "classic X3D encoding" for this (x3dv extension),
# since this is just easier to read/write for humans (contrast this with
# "example_level.x3d" that was generated by Blender and uses "XML X3D encoding",
# extension x3d).
#
# See X3D specification for the meaning of all nodes/fields inside.
# Right now, the most important and current is
# the "X3D Architecture and base components Edition 2",
# see http://www.web3d.org/files/specifications/19775-1/V3.2/index.html
# (and see http://www.web3d.org/x3d/specifications/ for all VRML/X3D specs list).


# You can embed one X3D file within another using the "Inline" node,
# this way example_level_final.x3dv contains
# the example_level.x3d (generated by Blender) + some of our customizations.
Inline { url "example_level.x3d" }

# Defines various information about avatar (player).
NavigationInfo {
  headlight FALSE
  type "WALK"

  # avatarSize is a list of floats:
  #
  # - collision sphere radius (Camera.Radius in our engine).
  #   If this is not specified (or zero), we will automatically calculate
  #   something hopefully sensible based on level size.
  #
  # - height above the terrain, used only when gravity works
  #   (Camera.PreferredHeight in our engine).
  #   If this is not specified, we will automatically calculate it based
  #   on Camera.Radius, and we always correct it (as this must be > Camera.Radius
  #   for things to work sensibly, preferably > Camera.Radius * 2 to also work
  #   with crouching, head bobbing etc.)
  #
  # - (not specified here) tallest object that you can climb, like a stair step
  #   (Camera.ClimbHeight in our engine).
  #   If not specified (or zero), there is no such limit, and you can climb
  #   very steep (but not vertical) slopes.
  avatarSize [ 0.5, 2 ]

  # speed is in units per second. This is Camera.MoveSpeed in our engine.
  speed 10
}

# Viewpoint defines initial player position/orientation when starting the level.
# I usually define it by navigating in view3dscene and then using view3dscene
# "Console -> Print Current Camera (Viewpoint) (VRML 2.0, X3D classic)".
# But you could also define it by setting camera in Blender
# (make sure in this case that you copy the Viewpoint node to this file,
# as bindable nodes like Viewpoint/NavigationInfo are ignored in Inline files).
#
# Camera settings "encoded" in the VRML/X3D declaration below :
# direction 0.7213725447654724 -4.3711381181310571E-008 0.6925467252731323
# up 0 1 0
# gravityUp 0 1 0
Viewpoint {
  position -6.9228663444519043 1.7266680002212524 -6.0395603179931641
  orientation -6.0594736339680821E-008 -1 0 2.3358101844787598
}
