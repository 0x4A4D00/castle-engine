{
  Copyright 2003-2008 Michalis Kamburelis.

  This file is part of "Kambi VRML game engine".

  "Kambi VRML game engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Kambi VRML game engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}

{ This is based on simple_view_model_2.pasprogram, with some changes:

  1. It always loads models/fog_culling_final.wrl VRML file.
     Be sure to run it with proper current directory
     (units/3dmodels.gl/examples/).

  2. It handles Background node (because our models/fog_culling_final.wrl
     model uses it).

  3. It handles some keys:
     'f' key turns fog on/off
     F5 makes a screenshot

  4. And finally, the most important thing: when rendering with fog on,
     we cull to fog visibilityRange. Objects outside of fog
     visibilityRange are not rendered at all. This allows us to render
     very quickly when fog is on.
}

program fog_culling;

uses VectorMath, Boxes3d, VRMLNodes, VRMLOpenGLRenderer, GL, GLU, GLExt, GLWindow,
  KambiClassUtils, KambiUtils, SysUtils, Classes, Object3dAsVRML,
  KambiGLUtils, VRMLScene, VRMLGLScene, Navigation,
  ProgressUnit, ProgressConsole, KambiFilesUtils, VRMLTriangleOctree,
  VRMLErrors;

var
  Glw: TGLWindowNavigated;

  Scene: TVRMLGLScene;
  { CameraRadius is needed for collision detection }
  CameraRadius: Single;

procedure BeforeDraw(glwin: TGLWindow);
begin
 Scene.PrepareRender([tgAll], [prBoundingBox]);
end;

type
  TFogVisibilityTester = class
    class function Test(Shape: TVRMLGLShape): boolean;
  end;

class function TFogVisibilityTester.Test(Shape: TVRMLGLShape): boolean;
begin
  { Test for collision between two spheres.
    1st is the bounding sphere of Shape.
    2nd is the sphere around current camera position,
      with the radius taken from fog visibilityRadius (we should
      always multiply this by FogDistanceScaling).
    If there is no collision than we don't have to render given Shape. }
  Result := PointsDistanceSqr(
    Shape.BoundingSphereCenter,
    Glw.WalkNav.CameraPos) <=
      Sqr(Scene.FogNode.FdVisibilityRange.Value * Scene.FogDistanceScaling +
        Sqrt(Shape.BoundingSphereRadiusSqr));
end;

procedure Draw(glwin: TGLWindow);
begin
  if Scene.Background <> nil then
  begin
    glLoadMatrix(Glw.Navigator.RotationMatrix);
    Scene.Background.Render;
    glClear(GL_DEPTH_BUFFER_BIT);
  end else
    glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT);

  glLoadMatrix(glw.Navigator.Matrix);

  if Scene.Attributes.UseFog then
    Scene.Render(@TFogVisibilityTester(nil).Test, tgAll) else
    Scene.RenderFrustum(Glw.WalkNav.Frustum, tgAll);

  Writeln(Format('Rendered Shapes: %d / %d',
    [ Scene.LastRender_RenderedShapesCount,
      Scene.LastRender_VisibleShapesCount ]));
end;

procedure Init(glwin: TGLWindow);
begin
 glEnable(GL_LIGHTING);
 glEnable(GL_LIGHT0);

 { We use quite large triangles for fog_culling level demo wall.
   This means that fog must be correctly rendered,
   with perspective correction hint, otherwise ugly artifacts
   will be visible. }
 glHint(GL_FOG_HINT, GL_NICEST);
end;

procedure Close(glwin: TGLWindow);
begin
 Scene.CloseGL;
end;

procedure KeyDown(glwin: TGLWindow; Key: TKey; c: char);
begin
  case Key of
    K_F:
      begin
        with Scene do Attributes.UseFog := not Attributes.UseFog;
        Glw.PostRedisplay;
      end;
    K_F5: glwin.SaveScreenDialog(FNameAutoInc('fog_culling_screen_%d.png'));
  end;
end;

procedure Resize(glwin: TGLWindow);

  procedure UpdateNavigatorProjectionMatrix;
  var
    ProjectionMatrix: TMatrix4f;
  begin
   glGetFloatv(GL_PROJECTION_MATRIX, @ProjectionMatrix);
   Glw.WalkNav.ProjectionMatrix := ProjectionMatrix;
  end;

begin
 glViewport(0, 0, glwin.Width, glwin.Height);
 ProjectionGLPerspective(45.0, glwin.Width/glwin.Height,
   CameraRadius * 0.6,
   Box3dMaxSize(Scene.BoundingBox) * 3.0);

 UpdateNavigatorProjectionMatrix;
end;

type
  TDummy = class
    class function MoveAllowed(Navigator: TWalkNavigator;
      const ProposedNewPos: TVector3Single; out NewPos: TVector3Single;
      const BecauseOfGravity: boolean): boolean;
  end;

class function TDummy.MoveAllowed(Navigator: TWalkNavigator;
  const ProposedNewPos: TVector3Single; out NewPos: TVector3Single;
  const BecauseOfGravity: boolean): boolean;
begin
 Result := Scene.OctreeCollisions.MoveAllowed(
   Navigator.CameraPos, ProposedNewPos, NewPos, CameraRadius,
   BecauseOfGravity, Scene.BoundingBox, Navigator.GravityUp);
end;

var
  //i: Integer;
  CamPos, CamDir, CamUp, GravityUp: TVector3Single;
begin
 Glw := TGLWindowNavigated.Create(Application);

 Parameters.CheckHigh(0);
 try
  VRMLWarning := @VRMLWarning_Write;

  Scene := TVRMLGLScene.Create(
    'models' + PathDelim + 'fog_culling_final.wrl', roSeparateShapes);

  Writeln(Scene.Info(true, true, false));

  { build octrees }
  Progress.UserInterface := ProgressConsoleInterface;
  Scene.TriangleOctreeProgressTitle := 'Building triangle octree';
  Scene.ShapeOctreeProgressTitle := 'Building Shape octree';
  Scene.Spatial := [ssRendering, ssDynamicCollisions];

  Scene.GetPerspectiveViewpoint(CamPos, CamDir, CamUp, GravityUp);

  { init Glw.Navigator }
  Glw.Navigator := TWalkNavigator.Create(Glw);
  Glw.WalkNav.Init(CamPos,
    VectorAdjustToLength(CamDir, Box3dAvgSize(Scene.BoundingBox) * 0.01*0.4),
    CamUp, GravityUp,
    0.0, 0.0 { unused, we don't use Gravity here });

  { init collision detection }
  if IsEmptyBox3d(Scene.BoundingBox) then
   CameraRadius := 1.0 { any non-zero dummy value } else
   CameraRadius := Box3dAvgSize(Scene.BoundingBox) * 0.01;
  Glw.WalkNav.OnMoveAllowed := @TDummy(nil).MoveAllowed;

  { allow the scene to use it's own lights }
  Scene.Attributes.UseLights := true;
  Scene.Attributes.FirstGLFreeLight := 1;

  Glw.OnInit := @Init;
  Glw.OnClose := @Close;
  Glw.OnResize := @Resize;
  Glw.OnBeforeDraw := @BeforeDraw;
  Glw.OnKeyDown := @KeyDown;
  Glw.InitAndRun(ProgramName, @Draw);
 finally Scene.Free end;
end.
